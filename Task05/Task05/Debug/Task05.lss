
Task05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000012f2  00001386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010e  0080010e  00001394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135b  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4f  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00003cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ae  00000000  00000000  00004165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00005413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_1>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ef       	ldi	r30, 0xF2	; 242
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 31       	cpi	r26, 0x1A	; 26
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 22 07 	call	0xe44	; 0xe44 <main>
      9e:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:

//interupts setups ********

void setup()
{
	DDRC=0xff;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
      aa:	84 b9       	out	0x04, r24	; 4
	DDRD =0x00;
      ac:	1a b8       	out	0x0a, r1	; 10
	DDRD &= ~(1 << BUTTON_PIN)&(1<<BUTTON_PIN2)&(1<<BUTTON_PIN3)&(1<<BUTTON_PIN4)|(1<<BUTTON_PIN5);
      ae:	8a b1       	in	r24, 0x0a	; 10
      b0:	82 70       	andi	r24, 0x02	; 2
      b2:	8a b9       	out	0x0a, r24	; 10
	PORTD |=(1<<BUTTON_PIN)|(1<<BUTTON_PIN2)|(1<<BUTTON_PIN3)|(1<<BUTTON_PIN4)|(1<<BUTTON_PIN5);
      b4:	8b b1       	in	r24, 0x0b	; 11
      b6:	8f 61       	ori	r24, 0x1F	; 31
      b8:	8b b9       	out	0x0b, r24	; 11

	
	
	
	// Enable external interrupt INT0
	EIMSK |= (1 << INT0)|(1<<INT1);
      ba:	8d b3       	in	r24, 0x1d	; 29
      bc:	83 60       	ori	r24, 0x03	; 3
      be:	8d bb       	out	0x1d, r24	; 29
	
	// Trigger on falling edge for INT0
	EICRA |= (1 << ISC01)|(1<<ISC11);
      c0:	e9 e6       	ldi	r30, 0x69	; 105
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	8a 60       	ori	r24, 0x0A	; 10
      c8:	80 83       	st	Z, r24
	
	// Enable global interrupts
	sei();
      ca:	78 94       	sei
      cc:	08 95       	ret

000000ce <__vector_1>:

//first interrupts(ButtonPin 1)***********************


ISR(INT0_vect)
{
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	11 24       	eor	r1, r1
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	// Toggle the LED state
	count++;
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	40 e8       	ldi	r20, 0x80	; 128
      f6:	5f e3       	ldi	r21, 0x3F	; 63
      f8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <count>
      fc:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <count+0x1>
     100:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count+0x2>
     104:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x3>
     108:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__addsf3>
     10c:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <count>
     110:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <count+0x1>
     114:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count+0x2>
     118:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count+0x3>
	resetvalue++;
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	40 e8       	ldi	r20, 0x80	; 128
     122:	5f e3       	ldi	r21, 0x3F	; 63
     124:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <resetvalue>
     128:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <resetvalue+0x1>
     12c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <resetvalue+0x2>
     130:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <resetvalue+0x3>
     134:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__addsf3>
     138:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <resetvalue>
     13c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <resetvalue+0x1>
     140:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <resetvalue+0x2>
     144:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <resetvalue+0x3>
	
	

}
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	bf 91       	pop	r27
     14e:	af 91       	pop	r26
     150:	9f 91       	pop	r25
     152:	8f 91       	pop	r24
     154:	7f 91       	pop	r23
     156:	6f 91       	pop	r22
     158:	5f 91       	pop	r21
     15a:	4f 91       	pop	r20
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0
     166:	1f 90       	pop	r1
     168:	18 95       	reti

0000016a <__vector_2>:

//second interrupt (Buttonpin 2)***********************
ISR(INT1_vect){
     16a:	1f 92       	push	r1
     16c:	0f 92       	push	r0
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	0f 92       	push	r0
     172:	11 24       	eor	r1, r1
     174:	cf 92       	push	r12
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	2f 93       	push	r18
     17e:	3f 93       	push	r19
     180:	4f 93       	push	r20
     182:	5f 93       	push	r21
     184:	6f 93       	push	r22
     186:	7f 93       	push	r23
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
     18c:	af 93       	push	r26
     18e:	bf 93       	push	r27
     190:	ef 93       	push	r30
     192:	ff 93       	push	r31

	if (count>0)
     194:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <count>
     198:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <count+0x1>
     19c:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <count+0x2>
     1a0:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <count+0x3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	a9 01       	movw	r20, r18
     1aa:	c7 01       	movw	r24, r14
     1ac:	b6 01       	movw	r22, r12
     1ae:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     1b2:	18 16       	cp	r1, r24
     1b4:	84 f4       	brge	.+32     	; 0x1d6 <__vector_2+0x6c>
	{
		count--;
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e8       	ldi	r20, 0x80	; 128
     1bc:	5f e3       	ldi	r21, 0x3F	; 63
     1be:	c7 01       	movw	r24, r14
     1c0:	b6 01       	movw	r22, r12
     1c2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__subsf3>
     1c6:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <count>
     1ca:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <count+0x1>
     1ce:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count+0x2>
     1d2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count+0x3>
		
		
	}

}
     1d6:	ff 91       	pop	r31
     1d8:	ef 91       	pop	r30
     1da:	bf 91       	pop	r27
     1dc:	af 91       	pop	r26
     1de:	9f 91       	pop	r25
     1e0:	8f 91       	pop	r24
     1e2:	7f 91       	pop	r23
     1e4:	6f 91       	pop	r22
     1e6:	5f 91       	pop	r21
     1e8:	4f 91       	pop	r20
     1ea:	3f 91       	pop	r19
     1ec:	2f 91       	pop	r18
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	df 90       	pop	r13
     1f4:	cf 90       	pop	r12
     1f6:	0f 90       	pop	r0
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	0f 90       	pop	r0
     1fc:	1f 90       	pop	r1
     1fe:	18 95       	reti

00000200 <displayCellsius>:

//celsius section****************

void displayCellsius(float count){
     200:	2f 92       	push	r2
     202:	3f 92       	push	r3
     204:	4f 92       	push	r4
     206:	5f 92       	push	r5
     208:	6f 92       	push	r6
     20a:	7f 92       	push	r7
     20c:	8f 92       	push	r8
     20e:	9f 92       	push	r9
     210:	af 92       	push	r10
     212:	bf 92       	push	r11
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	00 d0       	rcall	.+0      	; 0x226 <displayCellsius+0x26>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	4b 01       	movw	r8, r22
     22c:	5c 01       	movw	r10, r24
	for(int i; i<20;i++){
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	10 e0       	ldi	r17, 0x00	; 0
		else if (count<1000)
		{
			int givenNumber =count*10;
			int decimalPart = givenNumber % 10;
			
			PORTB = (1<<sw1);
     232:	55 24       	eor	r5, r5
     234:	53 94       	inc	r5
			PORTC = num[givenNumber/1000 %10];
     236:	0f 2e       	mov	r0, r31
     238:	f8 ee       	ldi	r31, 0xE8	; 232
     23a:	cf 2e       	mov	r12, r31
     23c:	f3 e0       	ldi	r31, 0x03	; 3
     23e:	df 2e       	mov	r13, r31
     240:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB =(1<<sw2);
     242:	68 94       	set
     244:	66 24       	eor	r6, r6
     246:	63 f8       	bld	r6, 3
			PORTC = num[givenNumber/100 %10];
     248:	0f 2e       	mov	r0, r31
     24a:	f4 e6       	ldi	r31, 0x64	; 100
     24c:	2f 2e       	mov	r2, r31
     24e:	31 2c       	mov	r3, r1
     250:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB = (1<<sw3);
     252:	68 94       	set
     254:	77 24       	eor	r7, r7
     256:	74 f8       	bld	r7, 4
			PORTC |=(1<<decimalPoint);
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
     258:	68 94       	set
     25a:	44 24       	eor	r4, r4
     25c:	45 f8       	bld	r4, 5

//celsius section****************

void displayCellsius(float count){
	for(int i; i<20;i++){
		if (!(PIND & (1<<BUTTON_PIN3))){
     25e:	4c 99       	sbic	0x09, 4	; 9
     260:	09 c0       	rjmp	.+18     	; 0x274 <displayCellsius+0x74>
			resetvalue =0;
     262:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetvalue>
     266:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <resetvalue+0x1>
     26a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <resetvalue+0x2>
     26e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <resetvalue+0x3>
     272:	27 c0       	rjmp	.+78     	; 0x2c2 <displayCellsius+0xc2>
		}
		else if (!(PIND & (1<<BUTTON_PIN4))){
     274:	48 99       	sbic	0x09, 0	; 9
     276:	12 c0       	rjmp	.+36     	; 0x29c <displayCellsius+0x9c>
				if (faranCels==0)
     278:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     27c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     280:	89 2b       	or	r24, r25
     282:	39 f4       	brne	.+14     	; 0x292 <displayCellsius+0x92>
				{
					faranCels=1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <faranCels+0x1>
     28c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <faranCels>
     290:	18 c0       	rjmp	.+48     	; 0x2c2 <displayCellsius+0xc2>
				}
				else {
					faranCels=0;
     292:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     296:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
     29a:	13 c0       	rjmp	.+38     	; 0x2c2 <displayCellsius+0xc2>
				}
		}
		else if (!(PIND & (1<<BUTTON_PIN5))){
     29c:	49 99       	sbic	0x09, 1	; 9
     29e:	11 c0       	rjmp	.+34     	; 0x2c2 <displayCellsius+0xc2>
			if (modeShift==0)
     2a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     2a4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     2a8:	89 2b       	or	r24, r25
     2aa:	39 f4       	brne	.+14     	; 0x2ba <displayCellsius+0xba>
			{
				modeShift=1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     2b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <displayCellsius+0xc2>
			}
			else {
				modeShift=0;
     2ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     2be:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			}
		}
	
		
		
		if (count<10)
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e2       	ldi	r20, 0x20	; 32
     2c8:	51 e4       	ldi	r21, 0x41	; 65
     2ca:	c5 01       	movw	r24, r10
     2cc:	b4 01       	movw	r22, r8
     2ce:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     2d2:	88 23       	and	r24, r24
     2d4:	0c f0       	brlt	.+2      	; 0x2d8 <displayCellsius+0xd8>
     2d6:	67 c0       	rjmp	.+206    	; 0x3a6 <displayCellsius+0x1a6>
		{
			int givenNumber =count*1000;
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	4a e7       	ldi	r20, 0x7A	; 122
     2de:	54 e4       	ldi	r21, 0x44	; 68
     2e0:	c5 01       	movw	r24, r10
     2e2:	b4 01       	movw	r22, r8
     2e4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     2e8:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
			int decimalPart = givenNumber % 1000;
     2ec:	cb 01       	movw	r24, r22
     2ee:	b6 01       	movw	r22, r12
     2f0:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     2f4:	9c 01       	movw	r18, r24
			
			
			PORTB =(1<<sw1);
     2f6:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/1000 %10];
     2f8:	cb 01       	movw	r24, r22
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     302:	fc 01       	movw	r30, r24
     304:	ec 5f       	subi	r30, 0xFC	; 252
     306:	fe 4f       	sbci	r31, 0xFE	; 254
     308:	80 81       	ld	r24, Z
     30a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	8f e3       	ldi	r24, 0x3F	; 63
     30e:	9c e9       	ldi	r25, 0x9C	; 156
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <displayCellsius+0x110>
     314:	00 c0       	rjmp	.+0      	; 0x316 <displayCellsius+0x116>
     316:	00 00       	nop
			_delay_ms(160);
			PORTC |=(1<<decimalPoint);
     318:	45 9a       	sbi	0x08, 5	; 8
     31a:	8f e1       	ldi	r24, 0x1F	; 31
     31c:	9e e4       	ldi	r25, 0x4E	; 78
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <displayCellsius+0x11e>
     322:	00 c0       	rjmp	.+0      	; 0x324 <displayCellsius+0x124>
     324:	00 00       	nop
			_delay_ms(80);
			PORTC &=~(1<<decimalPoint);
     326:	45 98       	cbi	0x08, 5	; 8
     328:	8f e1       	ldi	r24, 0x1F	; 31
     32a:	9e e4       	ldi	r25, 0x4E	; 78
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <displayCellsius+0x12c>
     330:	00 c0       	rjmp	.+0      	; 0x332 <displayCellsius+0x132>
     332:	00 00       	nop
			_delay_ms(80);
			
			
			
			PORTB = (1<<sw2);
     334:	65 b8       	out	0x05, r6	; 5
			PORTC = num[decimalPart/100 %10];
     336:	c9 01       	movw	r24, r18
     338:	b1 01       	movw	r22, r2
     33a:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     33e:	cb 01       	movw	r24, r22
     340:	6a e0       	ldi	r22, 0x0A	; 10
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     348:	fc 01       	movw	r30, r24
     34a:	ec 5f       	subi	r30, 0xFC	; 252
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	80 81       	ld	r24, Z
     350:	88 b9       	out	0x08, r24	; 8
     352:	8f e4       	ldi	r24, 0x4F	; 79
     354:	93 ec       	ldi	r25, 0xC3	; 195
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <displayCellsius+0x156>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <displayCellsius+0x15c>
     35c:	00 00       	nop
			_delay_ms(200);
			PORTB = (1<<sw3);
     35e:	75 b8       	out	0x05, r7	; 5
			PORTC = num[decimalPart/10 %10];
     360:	c9 01       	movw	r24, r18
     362:	6a e0       	ldi	r22, 0x0A	; 10
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     36a:	9c 01       	movw	r18, r24
     36c:	cb 01       	movw	r24, r22
     36e:	6a e0       	ldi	r22, 0x0A	; 10
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     376:	fc 01       	movw	r30, r24
     378:	ec 5f       	subi	r30, 0xFC	; 252
     37a:	fe 4f       	sbci	r31, 0xFE	; 254
     37c:	80 81       	ld	r24, Z
     37e:	88 b9       	out	0x08, r24	; 8
     380:	8f e4       	ldi	r24, 0x4F	; 79
     382:	93 ec       	ldi	r25, 0xC3	; 195
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <displayCellsius+0x184>
     388:	00 c0       	rjmp	.+0      	; 0x38a <displayCellsius+0x18a>
     38a:	00 00       	nop
			_delay_ms(200);
			PORTB = (1<<sw4);
     38c:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
     38e:	f9 01       	movw	r30, r18
     390:	ec 5f       	subi	r30, 0xFC	; 252
     392:	fe 4f       	sbci	r31, 0xFE	; 254
     394:	80 81       	ld	r24, Z
     396:	88 b9       	out	0x08, r24	; 8
     398:	8f e4       	ldi	r24, 0x4F	; 79
     39a:	93 ec       	ldi	r25, 0xC3	; 195
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <displayCellsius+0x19c>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <displayCellsius+0x1a2>
     3a2:	00 00       	nop
     3a4:	ff c0       	rjmp	.+510    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			
			
			
			
		}
		else if (count<100 )
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	48 ec       	ldi	r20, 0xC8	; 200
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	c5 01       	movw	r24, r10
     3b0:	b4 01       	movw	r22, r8
     3b2:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     3b6:	88 23       	and	r24, r24
     3b8:	0c f0       	brlt	.+2      	; 0x3bc <displayCellsius+0x1bc>
     3ba:	81 c0       	rjmp	.+258    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			int givenNumber =count*100;
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	48 ec       	ldi	r20, 0xC8	; 200
     3c2:	52 e4       	ldi	r21, 0x42	; 66
     3c4:	c5 01       	movw	r24, r10
     3c6:	b4 01       	movw	r22, r8
     3c8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     3cc:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
     3d0:	7b 01       	movw	r14, r22
			int decimalPart = givenNumber % 100;
     3d2:	cb 01       	movw	r24, r22
     3d4:	b1 01       	movw	r22, r2
     3d6:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
			if (resetvalue>40)
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e2       	ldi	r20, 0x20	; 32
     3e4:	52 e4       	ldi	r21, 0x42	; 66
     3e6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <resetvalue>
     3ea:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <resetvalue+0x1>
     3ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <resetvalue+0x2>
     3f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <resetvalue+0x3>
     3f6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     3fa:	18 16       	cp	r1, r24
     3fc:	4c f4       	brge	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			{
				PORTC ^=(1<<Led_Light);
     3fe:	88 b1       	in	r24, 0x08	; 8
     400:	87 25       	eor	r24, r7
     402:	88 b9       	out	0x08, r24	; 8
     404:	87 ea       	ldi	r24, 0xA7	; 167
     406:	91 e6       	ldi	r25, 0x61	; 97
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
				_delay_ms(100);
				
			}
			
			
			PORTB =(1<<sw1);
     410:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/1000 %10];
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     41a:	cb 01       	movw	r24, r22
     41c:	6a e0       	ldi	r22, 0x0A	; 10
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     424:	fc 01       	movw	r30, r24
     426:	ec 5f       	subi	r30, 0xFC	; 252
     428:	fe 4f       	sbci	r31, 0xFE	; 254
     42a:	80 81       	ld	r24, Z
     42c:	88 b9       	out	0x08, r24	; 8
     42e:	8f e4       	ldi	r24, 0x4F	; 79
     430:	93 ec       	ldi	r25, 0xC3	; 195
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     438:	00 00       	nop
			_delay_ms(200);
			
			PORTB=(1<<sw2);
     43a:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/100 %10];
     43c:	c7 01       	movw	r24, r14
     43e:	b1 01       	movw	r22, r2
     440:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     444:	cb 01       	movw	r24, r22
     446:	6a e0       	ldi	r22, 0x0A	; 10
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     44e:	fc 01       	movw	r30, r24
     450:	ec 5f       	subi	r30, 0xFC	; 252
     452:	fe 4f       	sbci	r31, 0xFE	; 254
     454:	80 81       	ld	r24, Z
     456:	88 b9       	out	0x08, r24	; 8
     458:	87 ec       	ldi	r24, 0xC7	; 199
     45a:	9f ea       	ldi	r25, 0xAF	; 175
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     462:	00 00       	nop
			_delay_ms(180);
			PORTC |=(1<<decimalPoint);
     464:	45 9a       	sbi	0x08, 5	; 8
     466:	8f e0       	ldi	r24, 0x0F	; 15
     468:	97 e2       	ldi	r25, 0x27	; 39
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     470:	00 00       	nop
			_delay_ms(40);
			PORTC &=~(1<<decimalPoint);
     472:	45 98       	cbi	0x08, 5	; 8
			//_delay_ms(80);
			
			PORTB=(1<<sw3);
     474:	75 b8       	out	0x05, r7	; 5
			PORTC = num[decimalPart/10 %10];
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	6a e0       	ldi	r22, 0x0A	; 10
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     482:	9c 01       	movw	r18, r24
     484:	cb 01       	movw	r24, r22
     486:	6a e0       	ldi	r22, 0x0A	; 10
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     48e:	fc 01       	movw	r30, r24
     490:	ec 5f       	subi	r30, 0xFC	; 252
     492:	fe 4f       	sbci	r31, 0xFE	; 254
     494:	80 81       	ld	r24, Z
     496:	88 b9       	out	0x08, r24	; 8
     498:	8f e4       	ldi	r24, 0x4F	; 79
     49a:	93 ec       	ldi	r25, 0xC3	; 195
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a2:	00 00       	nop
			_delay_ms(200);
			PORTB =(1<<sw4);
     4a4:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
     4a6:	f9 01       	movw	r30, r18
     4a8:	ec 5f       	subi	r30, 0xFC	; 252
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	80 81       	ld	r24, Z
     4ae:	88 b9       	out	0x08, r24	; 8
     4b0:	8f e4       	ldi	r24, 0x4F	; 79
     4b2:	93 ec       	ldi	r25, 0xC3	; 195
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4ba:	00 00       	nop
     4bc:	73 c0       	rjmp	.+230    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			_delay_ms(200);
			
		}
		else if (count<1000)
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4a e7       	ldi	r20, 0x7A	; 122
     4c4:	54 e4       	ldi	r21, 0x44	; 68
     4c6:	c5 01       	movw	r24, r10
     4c8:	b4 01       	movw	r22, r8
     4ca:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     4ce:	88 23       	and	r24, r24
     4d0:	0c f0       	brlt	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	68 c0       	rjmp	.+208    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
		{
			int givenNumber =count*10;
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 e2       	ldi	r20, 0x20	; 32
     4da:	51 e4       	ldi	r21, 0x41	; 65
     4dc:	c5 01       	movw	r24, r10
     4de:	b4 01       	movw	r22, r8
     4e0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     4e4:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
     4e8:	9b 01       	movw	r18, r22
			int decimalPart = givenNumber % 10;
			
			PORTB = (1<<sw1);
     4ea:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/1000 %10];
     4ec:	cb 01       	movw	r24, r22
     4ee:	b6 01       	movw	r22, r12
     4f0:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     4f4:	cb 01       	movw	r24, r22
     4f6:	6a e0       	ldi	r22, 0x0A	; 10
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     4fe:	fc 01       	movw	r30, r24
     500:	ec 5f       	subi	r30, 0xFC	; 252
     502:	fe 4f       	sbci	r31, 0xFE	; 254
     504:	80 81       	ld	r24, Z
     506:	88 b9       	out	0x08, r24	; 8
     508:	8f e4       	ldi	r24, 0x4F	; 79
     50a:	93 ec       	ldi	r25, 0xC3	; 195
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     510:	00 c0       	rjmp	.+0      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     512:	00 00       	nop
			_delay_ms(200);
			
			PORTB =(1<<sw2);
     514:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/100 %10];
     516:	c9 01       	movw	r24, r18
     518:	b1 01       	movw	r22, r2
     51a:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     51e:	cb 01       	movw	r24, r22
     520:	6a e0       	ldi	r22, 0x0A	; 10
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     528:	fc 01       	movw	r30, r24
     52a:	ec 5f       	subi	r30, 0xFC	; 252
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	80 81       	ld	r24, Z
     530:	88 b9       	out	0x08, r24	; 8
     532:	8f e4       	ldi	r24, 0x4F	; 79
     534:	93 ec       	ldi	r25, 0xC3	; 195
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     53c:	00 00       	nop
			_delay_ms(200);
			
			PORTB = (1<<sw3);
     53e:	75 b8       	out	0x05, r7	; 5
			PORTC = num[givenNumber/10 %10];
     540:	c9 01       	movw	r24, r18
     542:	6a e0       	ldi	r22, 0x0A	; 10
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     54a:	9c 01       	movw	r18, r24
     54c:	cb 01       	movw	r24, r22
     54e:	6a e0       	ldi	r22, 0x0A	; 10
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     556:	fc 01       	movw	r30, r24
     558:	ec 5f       	subi	r30, 0xFC	; 252
     55a:	fe 4f       	sbci	r31, 0xFE	; 254
     55c:	80 81       	ld	r24, Z
     55e:	88 b9       	out	0x08, r24	; 8
     560:	8b e1       	ldi	r24, 0x1B	; 27
     562:	91 e4       	ldi	r25, 0x41	; 65
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     568:	00 00       	nop
			_delay_ms(66.67);
			PORTC |=(1<<decimalPoint);
     56a:	45 9a       	sbi	0x08, 5	; 8
     56c:	8b e1       	ldi	r24, 0x1B	; 27
     56e:	91 e4       	ldi	r25, 0x41	; 65
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     574:	00 00       	nop
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
     576:	45 98       	cbi	0x08, 5	; 8
     578:	8b e1       	ldi	r24, 0x1B	; 27
     57a:	91 e4       	ldi	r25, 0x41	; 65
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     580:	00 00       	nop
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
     582:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
     584:	c9 01       	movw	r24, r18
     586:	6a e0       	ldi	r22, 0x0A	; 10
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     58e:	fc 01       	movw	r30, r24
     590:	ec 5f       	subi	r30, 0xFC	; 252
     592:	fe 4f       	sbci	r31, 0xFE	; 254
     594:	80 81       	ld	r24, Z
     596:	88 b9       	out	0x08, r24	; 8
     598:	8f e4       	ldi	r24, 0x4F	; 79
     59a:	93 ec       	ldi	r25, 0xC3	; 195
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     5a2:	00 00       	nop
}

//celsius section****************

void displayCellsius(float count){
	for(int i; i<20;i++){
     5a4:	0f 5f       	subi	r16, 0xFF	; 255
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
     5a8:	04 31       	cpi	r16, 0x14	; 20
     5aa:	11 05       	cpc	r17, r1
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5ae:	57 ce       	rjmp	.-850    	; 0x25e <displayCellsius+0x5e>
			
		}
		
	}

}
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	6f 90       	pop	r6
     5d0:	5f 90       	pop	r5
     5d2:	4f 90       	pop	r4
     5d4:	3f 90       	pop	r3
     5d6:	2f 90       	pop	r2
     5d8:	08 95       	ret

000005da <displayFaran>:

//farenhite section **********************

void displayFaran(float b){
     5da:	2f 92       	push	r2
     5dc:	3f 92       	push	r3
     5de:	4f 92       	push	r4
     5e0:	5f 92       	push	r5
     5e2:	6f 92       	push	r6
     5e4:	7f 92       	push	r7
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	00 d0       	rcall	.+0      	; 0x600 <displayFaran+0x26>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	4b 01       	movw	r8, r22
     606:	5c 01       	movw	r10, r24
	
	for(int j;j<20;j++){
     608:	00 e0       	ldi	r16, 0x00	; 0
     60a:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		else if (!(PIND & (1<<BUTTON_PIN5))){
			if (modeShift==0)
			{
				modeShift=1;
     60c:	22 24       	eor	r2, r2
     60e:	23 94       	inc	r2
     610:	31 2c       	mov	r3, r1
				_delay_ms(100);
				
			}
			
			
			PORTB = (1<<sw1);
     612:	66 24       	eor	r6, r6
     614:	63 94       	inc	r6
			PORTC = num[givenNumber/1000 %10];
			_delay_ms(200);
			
			PORTB =(1<<sw2);
     616:	68 94       	set
     618:	55 24       	eor	r5, r5
     61a:	53 f8       	bld	r5, 3
			PORTC = num[givenNumber/100 %10];
     61c:	0f 2e       	mov	r0, r31
     61e:	f4 e6       	ldi	r31, 0x64	; 100
     620:	cf 2e       	mov	r12, r31
     622:	d1 2c       	mov	r13, r1
     624:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB = (1<<sw3);
     626:	68 94       	set
     628:	77 24       	eor	r7, r7
     62a:	74 f8       	bld	r7, 4
			PORTC |=(1<<decimalPoint);
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
     62c:	68 94       	set
     62e:	44 24       	eor	r4, r4
     630:	45 f8       	bld	r4, 5
//farenhite section **********************

void displayFaran(float b){
	
	for(int j;j<20;j++){
		if (!(PIND & (1<<BUTTON_PIN3))){
     632:	4c 99       	sbic	0x09, 4	; 9
     634:	09 c0       	rjmp	.+18     	; 0x648 <displayFaran+0x6e>
			resetvalue=0;
     636:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetvalue>
     63a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <resetvalue+0x1>
     63e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <resetvalue+0x2>
     642:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <resetvalue+0x3>
     646:	23 c0       	rjmp	.+70     	; 0x68e <displayFaran+0xb4>
		}
		else if (!(PIND & (1<<BUTTON_PIN4))){
     648:	48 99       	sbic	0x09, 0	; 9
     64a:	10 c0       	rjmp	.+32     	; 0x66c <displayFaran+0x92>
			if (faranCels==0)
     64c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     650:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     654:	89 2b       	or	r24, r25
     656:	29 f4       	brne	.+10     	; 0x662 <displayFaran+0x88>
			{
				faranCels=1;
     658:	30 92 11 01 	sts	0x0111, r3	; 0x800111 <faranCels+0x1>
     65c:	20 92 10 01 	sts	0x0110, r2	; 0x800110 <faranCels>
     660:	16 c0       	rjmp	.+44     	; 0x68e <displayFaran+0xb4>
			}
			else {
				faranCels=0;
     662:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     666:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
     66a:	11 c0       	rjmp	.+34     	; 0x68e <displayFaran+0xb4>
			}
		}
		else if (!(PIND & (1<<BUTTON_PIN5))){
     66c:	49 99       	sbic	0x09, 1	; 9
     66e:	0f c0       	rjmp	.+30     	; 0x68e <displayFaran+0xb4>
			if (modeShift==0)
     670:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     674:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     678:	89 2b       	or	r24, r25
     67a:	29 f4       	brne	.+10     	; 0x686 <displayFaran+0xac>
			{
				modeShift=1;
     67c:	30 92 0f 01 	sts	0x010F, r3	; 0x80010f <__data_end+0x1>
     680:	20 92 0e 01 	sts	0x010E, r2	; 0x80010e <__data_end>
     684:	04 c0       	rjmp	.+8      	; 0x68e <displayFaran+0xb4>
			}
			else {
				modeShift=0;
     686:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     68a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			}
		}


		if (b<100 )
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	48 ec       	ldi	r20, 0xC8	; 200
     694:	52 e4       	ldi	r21, 0x42	; 66
     696:	c5 01       	movw	r24, r10
     698:	b4 01       	movw	r22, r8
     69a:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     69e:	88 23       	and	r24, r24
     6a0:	0c f0       	brlt	.+2      	; 0x6a4 <displayFaran+0xca>
     6a2:	63 c0       	rjmp	.+198    	; 0x76a <displayFaran+0x190>
		{
			int givenNumber =b*100;
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	48 ec       	ldi	r20, 0xC8	; 200
     6aa:	52 e4       	ldi	r21, 0x42	; 66
     6ac:	c5 01       	movw	r24, r10
     6ae:	b4 01       	movw	r22, r8
     6b0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     6b4:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
     6b8:	9b 01       	movw	r18, r22
			int decimalPart = givenNumber % 100;
     6ba:	cb 01       	movw	r24, r22
     6bc:	b6 01       	movw	r22, r12
     6be:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     6c2:	7b 01       	movw	r14, r22
     6c4:	fc 01       	movw	r30, r24
			
			
			PORTB =(1<<sw1);
     6c6:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/1000 %10];
     6c8:	c9 01       	movw	r24, r18
     6ca:	68 ee       	ldi	r22, 0xE8	; 232
     6cc:	73 e0       	ldi	r23, 0x03	; 3
     6ce:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     6d2:	cb 01       	movw	r24, r22
     6d4:	6a e0       	ldi	r22, 0x0A	; 10
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     6dc:	dc 01       	movw	r26, r24
     6de:	ac 5f       	subi	r26, 0xFC	; 252
     6e0:	be 4f       	sbci	r27, 0xFE	; 254
     6e2:	8c 91       	ld	r24, X
     6e4:	88 b9       	out	0x08, r24	; 8
     6e6:	8f e4       	ldi	r24, 0x4F	; 79
     6e8:	93 ec       	ldi	r25, 0xC3	; 195
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <displayFaran+0x110>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <displayFaran+0x116>
     6f0:	00 00       	nop
			_delay_ms(200);
			
			PORTB =(1<<sw2);
     6f2:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/100 %10];
     6f4:	c7 01       	movw	r24, r14
     6f6:	6a e0       	ldi	r22, 0x0A	; 10
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     6fe:	dc 01       	movw	r26, r24
     700:	ac 5f       	subi	r26, 0xFC	; 252
     702:	be 4f       	sbci	r27, 0xFE	; 254
     704:	8c 91       	ld	r24, X
     706:	88 b9       	out	0x08, r24	; 8
     708:	8f e3       	ldi	r24, 0x3F	; 63
     70a:	9c e9       	ldi	r25, 0x9C	; 156
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	f1 f7       	brne	.-4      	; 0x70c <displayFaran+0x132>
     710:	00 c0       	rjmp	.+0      	; 0x712 <displayFaran+0x138>
     712:	00 00       	nop
			_delay_ms(160);
			PORTC |=(1<<decimalPoint);
     714:	45 9a       	sbi	0x08, 5	; 8
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	95 e4       	ldi	r25, 0x45	; 69
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <displayFaran+0x140>
     71e:	00 00       	nop
			_delay_ms(70.67);
			PORTC &=~(1<<decimalPoint);
     720:	45 98       	cbi	0x08, 5	; 8
			//_delay_ms(66.67);
			
			PORTB = (1<<sw3);
     722:	75 b8       	out	0x05, r7	; 5
			PORTC = num[decimalPart/10 %10];
     724:	cf 01       	movw	r24, r30
     726:	6a e0       	ldi	r22, 0x0A	; 10
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     72e:	9c 01       	movw	r18, r24
     730:	cb 01       	movw	r24, r22
     732:	6a e0       	ldi	r22, 0x0A	; 10
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     73a:	fc 01       	movw	r30, r24
     73c:	ec 5f       	subi	r30, 0xFC	; 252
     73e:	fe 4f       	sbci	r31, 0xFE	; 254
     740:	80 81       	ld	r24, Z
     742:	88 b9       	out	0x08, r24	; 8
     744:	8f e4       	ldi	r24, 0x4F	; 79
     746:	93 ec       	ldi	r25, 0xC3	; 195
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <displayFaran+0x16e>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <displayFaran+0x174>
     74e:	00 00       	nop
			_delay_ms(200);
			PORTB = (1<<sw4);
     750:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
     752:	f9 01       	movw	r30, r18
     754:	ec 5f       	subi	r30, 0xFC	; 252
     756:	fe 4f       	sbci	r31, 0xFE	; 254
     758:	80 81       	ld	r24, Z
     75a:	88 b9       	out	0x08, r24	; 8
     75c:	8f e4       	ldi	r24, 0x4F	; 79
     75e:	93 ec       	ldi	r25, 0xC3	; 195
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <displayFaran+0x186>
     764:	00 c0       	rjmp	.+0      	; 0x766 <displayFaran+0x18c>
     766:	00 00       	nop
     768:	94 c0       	rjmp	.+296    	; 0x892 <displayFaran+0x2b8>
			
			
			
			
		}
		else if (b<1000)
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	4a e7       	ldi	r20, 0x7A	; 122
     770:	54 e4       	ldi	r21, 0x44	; 68
     772:	c5 01       	movw	r24, r10
     774:	b4 01       	movw	r22, r8
     776:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     77a:	88 23       	and	r24, r24
     77c:	0c f0       	brlt	.+2      	; 0x780 <displayFaran+0x1a6>
     77e:	89 c0       	rjmp	.+274    	; 0x892 <displayFaran+0x2b8>
		{
			int givenNumber =b*10;
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e2       	ldi	r20, 0x20	; 32
     786:	51 e4       	ldi	r21, 0x41	; 65
     788:	c5 01       	movw	r24, r10
     78a:	b4 01       	movw	r22, r8
     78c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     790:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
     794:	7b 01       	movw	r14, r22
			int decimalPart = givenNumber % 10;
     796:	cb 01       	movw	r24, r22
     798:	6a e0       	ldi	r22, 0x0A	; 10
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     7a0:	9a 83       	std	Y+2, r25	; 0x02
     7a2:	89 83       	std	Y+1, r24	; 0x01
			if (resetvalue>40)
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e2       	ldi	r20, 0x20	; 32
     7aa:	52 e4       	ldi	r21, 0x42	; 66
     7ac:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <resetvalue>
     7b0:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <resetvalue+0x1>
     7b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <resetvalue+0x2>
     7b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <resetvalue+0x3>
     7bc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     7c0:	18 16       	cp	r1, r24
     7c2:	4c f4       	brge	.+18     	; 0x7d6 <displayFaran+0x1fc>
			{
				PORTC ^=(1<<Led_Light);
     7c4:	88 b1       	in	r24, 0x08	; 8
     7c6:	87 25       	eor	r24, r7
     7c8:	88 b9       	out	0x08, r24	; 8
     7ca:	87 ea       	ldi	r24, 0xA7	; 167
     7cc:	91 e6       	ldi	r25, 0x61	; 97
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <displayFaran+0x1f4>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <displayFaran+0x1fa>
     7d4:	00 00       	nop
				_delay_ms(100);
				
			}
			
			
			PORTB = (1<<sw1);
     7d6:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/1000 %10];
     7d8:	c7 01       	movw	r24, r14
     7da:	68 ee       	ldi	r22, 0xE8	; 232
     7dc:	73 e0       	ldi	r23, 0x03	; 3
     7de:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     7e2:	cb 01       	movw	r24, r22
     7e4:	6a e0       	ldi	r22, 0x0A	; 10
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     7ec:	fc 01       	movw	r30, r24
     7ee:	ec 5f       	subi	r30, 0xFC	; 252
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	80 81       	ld	r24, Z
     7f4:	88 b9       	out	0x08, r24	; 8
     7f6:	8f e4       	ldi	r24, 0x4F	; 79
     7f8:	93 ec       	ldi	r25, 0xC3	; 195
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <displayFaran+0x220>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <displayFaran+0x226>
     800:	00 00       	nop
			_delay_ms(200);
			
			PORTB =(1<<sw2);
     802:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/100 %10];
     804:	c7 01       	movw	r24, r14
     806:	b6 01       	movw	r22, r12
     808:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     80c:	cb 01       	movw	r24, r22
     80e:	6a e0       	ldi	r22, 0x0A	; 10
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     816:	fc 01       	movw	r30, r24
     818:	ec 5f       	subi	r30, 0xFC	; 252
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	80 81       	ld	r24, Z
     81e:	88 b9       	out	0x08, r24	; 8
     820:	8f e4       	ldi	r24, 0x4F	; 79
     822:	93 ec       	ldi	r25, 0xC3	; 195
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <displayFaran+0x24a>
     828:	00 c0       	rjmp	.+0      	; 0x82a <displayFaran+0x250>
     82a:	00 00       	nop
			_delay_ms(200);
			
			PORTB = (1<<sw3);
     82c:	75 b8       	out	0x05, r7	; 5
			PORTC = num[givenNumber/10 %10];
     82e:	c7 01       	movw	r24, r14
     830:	6a e0       	ldi	r22, 0x0A	; 10
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     838:	cb 01       	movw	r24, r22
     83a:	6a e0       	ldi	r22, 0x0A	; 10
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     842:	fc 01       	movw	r30, r24
     844:	ec 5f       	subi	r30, 0xFC	; 252
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	80 81       	ld	r24, Z
     84a:	88 b9       	out	0x08, r24	; 8
     84c:	8b e1       	ldi	r24, 0x1B	; 27
     84e:	91 e4       	ldi	r25, 0x41	; 65
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <displayFaran+0x276>
     854:	00 00       	nop
			_delay_ms(66.67);
			PORTC |=(1<<decimalPoint);
     856:	45 9a       	sbi	0x08, 5	; 8
     858:	8b e1       	ldi	r24, 0x1B	; 27
     85a:	91 e4       	ldi	r25, 0x41	; 65
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <displayFaran+0x282>
     860:	00 00       	nop
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
     862:	45 98       	cbi	0x08, 5	; 8
     864:	8b e1       	ldi	r24, 0x1B	; 27
     866:	91 e4       	ldi	r25, 0x41	; 65
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <displayFaran+0x28e>
     86c:	00 00       	nop
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
     86e:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	6a e0       	ldi	r22, 0x0A	; 10
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     87c:	fc 01       	movw	r30, r24
     87e:	ec 5f       	subi	r30, 0xFC	; 252
     880:	fe 4f       	sbci	r31, 0xFE	; 254
     882:	80 81       	ld	r24, Z
     884:	88 b9       	out	0x08, r24	; 8
     886:	8f e4       	ldi	r24, 0x4F	; 79
     888:	93 ec       	ldi	r25, 0xC3	; 195
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <displayFaran+0x2b0>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <displayFaran+0x2b6>
     890:	00 00       	nop

//farenhite section **********************

void displayFaran(float b){
	
	for(int j;j<20;j++){
     892:	0f 5f       	subi	r16, 0xFF	; 255
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	04 31       	cpi	r16, 0x14	; 20
     898:	11 05       	cpc	r17, r1
     89a:	09 f0       	breq	.+2      	; 0x89e <displayFaran+0x2c4>
     89c:	ca ce       	rjmp	.-620    	; 0x632 <displayFaran+0x58>
			
			
			
		}
	}
}
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	7f 90       	pop	r7
     8bc:	6f 90       	pop	r6
     8be:	5f 90       	pop	r5
     8c0:	4f 90       	pop	r4
     8c2:	3f 90       	pop	r3
     8c4:	2f 90       	pop	r2
     8c6:	08 95       	ret

000008c8 <run1>:
// mode (only display celsius value) *****************

void run1(){
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
	

	b = count * 9.0 / 5.0 + 32.0;
     8d0:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <count>
     8d4:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <count+0x1>
     8d8:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <count+0x2>
     8dc:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <count+0x3>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e1       	ldi	r20, 0x10	; 16
     8e6:	51 e4       	ldi	r21, 0x41	; 65
     8e8:	c7 01       	movw	r24, r14
     8ea:	b6 01       	movw	r22, r12
     8ec:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 ea       	ldi	r20, 0xA0	; 160
     8f6:	50 e4       	ldi	r21, 0x40	; 64
     8f8:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divsf3>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	52 e4       	ldi	r21, 0x42	; 66
     904:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__addsf3>
     908:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     90c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     910:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     914:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
		displayCellsius(count);
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 00 01 	call	0x200	; 0x200 <displayCellsius>
			if (!(PIND & (1<<BUTTON_PIN4))){
     920:	48 99       	sbic	0x09, 0	; 9
     922:	11 c0       	rjmp	.+34     	; 0x946 <__stack+0x47>
				if (faranCels==0)
     924:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     928:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     92c:	89 2b       	or	r24, r25
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0x3f>
				{
					faranCels=1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <faranCels+0x1>
     938:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <faranCels>
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0x47>
					
				}
				else {
					faranCels=0;
     93e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     942:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
					
				}
			}
			
			if (!(PIND & (1<<BUTTON_PIN5))){
     946:	49 99       	sbic	0x09, 1	; 9
     948:	11 c0       	rjmp	.+34     	; 0x96c <__stack+0x6d>
				if (modeShift==0)
     94a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     94e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     952:	89 2b       	or	r24, r25
     954:	39 f4       	brne	.+14     	; 0x964 <__stack+0x65>
				{
					modeShift=1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     95e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     962:	04 c0       	rjmp	.+8      	; 0x96c <__stack+0x6d>
					
				}
				else {
					modeShift=0;
     964:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     968:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			}
		

		
	
}
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	08 95       	ret

00000976 <run2>:

//mode (Display faranhite )********************

void run2(){
	
	b = count * 9.0 / 5.0 + 32.0;
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e1       	ldi	r20, 0x10	; 16
     97c:	51 e4       	ldi	r21, 0x41	; 65
     97e:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <count>
     982:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <count+0x1>
     986:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count+0x2>
     98a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x3>
     98e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 ea       	ldi	r20, 0xA0	; 160
     998:	50 e4       	ldi	r21, 0x40	; 64
     99a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divsf3>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	52 e4       	ldi	r21, 0x42	; 66
     9a6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__addsf3>
     9aa:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     9ae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     9b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     9b6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
		displayFaran(b);
     9ba:	0e 94 ed 02 	call	0x5da	; 0x5da <displayFaran>
		
		
		if (!(PIND & (1<<BUTTON_PIN4))){
     9be:	48 99       	sbic	0x09, 0	; 9
     9c0:	11 c0       	rjmp	.+34     	; 0x9e4 <run2+0x6e>
			if (faranCels==0)
     9c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     9c6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     9ca:	89 2b       	or	r24, r25
     9cc:	39 f4       	brne	.+14     	; 0x9dc <run2+0x66>
			{
				faranCels=1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <faranCels+0x1>
     9d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <faranCels>
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <run2+0x6e>
				
			}
			else {
				faranCels=0;
     9dc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     9e0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
				
			}
		}
		
		if (!(PIND & (1<<BUTTON_PIN5))){
     9e4:	49 99       	sbic	0x09, 1	; 9
     9e6:	11 c0       	rjmp	.+34     	; 0xa0a <run2+0x94>
			if (modeShift==0)
     9e8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     9ec:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     9f0:	89 2b       	or	r24, r25
     9f2:	39 f4       	brne	.+14     	; 0xa02 <run2+0x8c>
			{
				modeShift=1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     9fc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     a00:	08 95       	ret
			
			}
			else {
				modeShift=0;
     a02:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     a06:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
     a0a:	08 95       	ret

00000a0c <ledLight>:
	
}
	
	//PWM signal for PD pins

void ledLight(float num){
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	6b 01       	movw	r12, r22
     a16:	7c 01       	movw	r14, r24
		TCCR0A |=(1<<WGM00)|(1<<WGM01)|(1<<COM0A1) | (1<<COM0B1);//FAST PULSE WIDTH WGM01,WGM02
     a18:	84 b5       	in	r24, 0x24	; 36
     a1a:	83 6a       	ori	r24, 0xA3	; 163
     a1c:	84 bd       	out	0x24, r24	; 36
		//SELCT NONINVERTING OUTPUT PD6 =COMOA1
		
		
		TCCR0B |=(1<<CS02);//FIND PRESCALER WITH FORMULA AND COME 256 AS A VALUE SET THIS VALUE TCROB REGISTER
     a1e:	85 b5       	in	r24, 0x25	; 37
     a20:	84 60       	ori	r24, 0x04	; 4
     a22:	85 bd       	out	0x25, r24	; 37
		
		DDRD|=(1<<LedCold) | (1<<LedNormal); //DEFINE OUTPUT
     a24:	8a b1       	in	r24, 0x0a	; 10
     a26:	80 66       	ori	r24, 0x60	; 96
     a28:	8a b9       	out	0x0a, r24	; 10
		
		if (num <= 15)
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e7       	ldi	r20, 0x70	; 112
     a30:	51 e4       	ldi	r21, 0x41	; 65
     a32:	c7 01       	movw	r24, r14
     a34:	b6 01       	movw	r22, r12
     a36:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     a3a:	18 16       	cp	r1, r24
     a3c:	9c f0       	brlt	.+38     	; 0xa64 <ledLight+0x58>
		{
				num =num*16;
				OCR0A=num;
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e8       	ldi	r20, 0x80	; 128
     a44:	51 e4       	ldi	r21, 0x41	; 65
     a46:	c7 01       	movw	r24, r14
     a48:	b6 01       	movw	r22, r12
     a4a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__mulsf3>
     a4e:	0e 94 39 08 	call	0x1072	; 0x1072 <__fixunssfsi>
     a52:	67 bd       	out	0x27, r22	; 39
     a54:	83 ec       	ldi	r24, 0xC3	; 195
     a56:	99 e0       	ldi	r25, 0x09	; 9
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <ledLight+0x4c>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <ledLight+0x52>
     a5e:	00 00       	nop
				_delay_ms(10);
				OCR0A=0;
     a60:	17 bc       	out	0x27, r1	; 39
     a62:	2b c0       	rjmp	.+86     	; 0xaba <ledLight+0xae>
				
				
		}else if (num<=25)
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	48 ec       	ldi	r20, 0xC8	; 200
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	c7 01       	movw	r24, r14
     a6e:	b6 01       	movw	r22, r12
     a70:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     a74:	18 16       	cp	r1, r24
     a76:	ac f0       	brlt	.+42     	; 0xaa2 <ledLight+0x96>
		
		{
			OCR0A =0;
     a78:	17 bc       	out	0x27, r1	; 39
			int temp = num;
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
			
			temp =temp%15;
			OCR0B =temp*16;
     a82:	cb 01       	movw	r24, r22
     a84:	6f e0       	ldi	r22, 0x0F	; 15
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     a8c:	82 95       	swap	r24
     a8e:	80 7f       	andi	r24, 0xF0	; 240
     a90:	88 bd       	out	0x28, r24	; 40
     a92:	83 ec       	ldi	r24, 0xC3	; 195
     a94:	99 e0       	ldi	r25, 0x09	; 9
     a96:	01 97       	sbiw	r24, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <ledLight+0x8a>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <ledLight+0x90>
     a9c:	00 00       	nop
			_delay_ms(10);
			OCR0B=0;
     a9e:	18 bc       	out	0x28, r1	; 40
     aa0:	0c c0       	rjmp	.+24     	; 0xaba <ledLight+0xae>
		}
		else if(num>25){
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	48 ec       	ldi	r20, 0xC8	; 200
     aa8:	51 e4       	ldi	r21, 0x41	; 65
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     ab2:	18 16       	cp	r1, r24
     ab4:	14 f4       	brge	.+4      	; 0xaba <ledLight+0xae>
			OCR0B =0;
     ab6:	18 bc       	out	0x28, r1	; 40
			OCR0A =0;
     ab8:	17 bc       	out	0x27, r1	; 39
			
			
		}
		
		
		if (!(PIND & (1<<BUTTON_PIN3))){
     aba:	4c 99       	sbic	0x09, 4	; 9
     abc:	08 c0       	rjmp	.+16     	; 0xace <ledLight+0xc2>
			resetvalue=0;
     abe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetvalue>
     ac2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <resetvalue+0x1>
     ac6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <resetvalue+0x2>
     aca:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <resetvalue+0x3>
		
		
		
		
	
}
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	08 95       	ret

00000ad8 <ledLightSecond>:


//PWM signal for PC pins


void ledLightSecond(float num){
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	6b 01       	movw	r12, r22
     ae2:	7c 01       	movw	r14, r24
		TCCR1A |=(1<<WGM11)|(1<<COM1A1) |(1<COM1B1);
     ae4:	e0 e8       	ldi	r30, 0x80	; 128
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	83 68       	ori	r24, 0x83	; 131
     aec:	80 83       	st	Z, r24
		TCCR1B |=(1<<WGM12)|(1<<CS11);
     aee:	e1 e8       	ldi	r30, 0x81	; 129
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	8a 60       	ori	r24, 0x0A	; 10
     af6:	80 83       	st	Z, r24
		
		DDRB |=(1<<LedWarmth) | (1<<LedHot);
     af8:	84 b1       	in	r24, 0x04	; 4
     afa:	86 60       	ori	r24, 0x06	; 6
     afc:	84 b9       	out	0x04, r24	; 4
		ICR1=1023;
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b06:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		
		
		if (num<25){
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	48 ec       	ldi	r20, 0xC8	; 200
     b10:	51 e4       	ldi	r21, 0x41	; 65
     b12:	c7 01       	movw	r24, r14
     b14:	b6 01       	movw	r22, r12
     b16:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     b1a:	88 23       	and	r24, r24
     b1c:	4c f4       	brge	.+18     	; 0xb30 <ledLightSecond+0x58>
			OCR1A =0;
     b1e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b22:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B =0;
     b26:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     b2a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     b2e:	3a c0       	rjmp	.+116    	; 0xba4 <ledLightSecond+0xcc>
		}
		
		else if(num>25)
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	48 ec       	ldi	r20, 0xC8	; 200
     b36:	51 e4       	ldi	r21, 0x41	; 65
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     b40:	18 16       	cp	r1, r24
     b42:	84 f5       	brge	.+96     	; 0xba4 <ledLightSecond+0xcc>
		{
			if (num>35)
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	4c e0       	ldi	r20, 0x0C	; 12
     b4a:	52 e4       	ldi	r21, 0x42	; 66
     b4c:	c7 01       	movw	r24, r14
     b4e:	b6 01       	movw	r22, r12
     b50:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     b54:	18 16       	cp	r1, r24
     b56:	5c f4       	brge	.+22     	; 0xb6e <ledLightSecond+0x96>
			{
				OCR1A=0;
     b58:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b5c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b60:	83 ec       	ldi	r24, 0xC3	; 195
     b62:	99 e0       	ldi	r25, 0x09	; 9
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <ledLightSecond+0x8c>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <ledLightSecond+0x92>
     b6a:	00 00       	nop
     b6c:	1b c0       	rjmp	.+54     	; 0xba4 <ledLightSecond+0xcc>
				_delay_ms(10);
			}
			else
			{
			
			int temp = num;
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
			temp = temp%25;
     b76:	cb 01       	movw	r24, r22
     b78:	69 e1       	ldi	r22, 0x19	; 25
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
			temp =temp*16;
			
			OCR1A =temp;
     b80:	82 95       	swap	r24
     b82:	92 95       	swap	r25
     b84:	90 7f       	andi	r25, 0xF0	; 240
     b86:	98 27       	eor	r25, r24
     b88:	80 7f       	andi	r24, 0xF0	; 240
     b8a:	98 27       	eor	r25, r24
     b8c:	e8 e8       	ldi	r30, 0x88	; 136
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	91 83       	std	Z+1, r25	; 0x01
     b92:	80 83       	st	Z, r24
     b94:	83 ec       	ldi	r24, 0xC3	; 195
     b96:	99 e0       	ldi	r25, 0x09	; 9
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <ledLightSecond+0xc0>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <ledLightSecond+0xc6>
     b9e:	00 00       	nop
			_delay_ms(10);
			OCR1A=0;
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
			
			
		
		}
		
		if (!(PIND & (1<<BUTTON_PIN4))){
     ba4:	48 99       	sbic	0x09, 0	; 9
     ba6:	11 c0       	rjmp	.+34     	; 0xbca <ledLightSecond+0xf2>
				if (faranCels==0)
     ba8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     bac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     bb0:	89 2b       	or	r24, r25
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <ledLightSecond+0xea>
				{
					faranCels=1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <faranCels+0x1>
     bbc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <faranCels>
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <ledLightSecond+0xf2>
				}
				else {
					faranCels=0;
     bc2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     bc6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
				}
			}
			
		if (!(PIND & (1<<BUTTON_PIN5))){
     bca:	49 99       	sbic	0x09, 1	; 9
     bcc:	11 c0       	rjmp	.+34     	; 0xbf0 <ledLightSecond+0x118>
				if (modeShift==0)
     bce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     bd2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     bd6:	89 2b       	or	r24, r25
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <ledLightSecond+0x110>
				{
					modeShift=1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     be2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <ledLightSecond+0x118>
				}
				else {
					modeShift=0;
     be8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     bec:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
				}
			}
		if (!(PIND & (1<<BUTTON_PIN3))){
     bf0:	4c 99       	sbic	0x09, 4	; 9
     bf2:	08 c0       	rjmp	.+16     	; 0xc04 <ledLightSecond+0x12c>
			resetvalue=0;
     bf4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetvalue>
     bf8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <resetvalue+0x1>
     bfc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <resetvalue+0x2>
     c00:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <resetvalue+0x3>
		}
		
		
}
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	08 95       	ret

00000c0e <ledLightThird>:

// pWM signgal for PC1 pin

void ledLightThird(float count){
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	6b 01       	movw	r12, r22
     c18:	7c 01       	movw	r14, r24
	TCCR1A |= (1<<WGM11) | (1<<COM1B1); // Use COM1B1 instead of COM1A1
     c1a:	e0 e8       	ldi	r30, 0x80	; 128
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	82 62       	ori	r24, 0x22	; 34
     c22:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS11);
     c24:	e1 e8       	ldi	r30, 0x81	; 129
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8a 60       	ori	r24, 0x0A	; 10
     c2c:	80 83       	st	Z, r24
	DDRB |= (1<<LedHot); // Use PB2 instead of PB1
     c2e:	22 9a       	sbi	0x04, 2	; 4
	ICR1 = 1023;
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     c38:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		if (count<=35)
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	4c e0       	ldi	r20, 0x0C	; 12
     c42:	52 e4       	ldi	r21, 0x42	; 66
     c44:	c7 01       	movw	r24, r14
     c46:	b6 01       	movw	r22, r12
     c48:	0e 94 bb 07 	call	0xf76	; 0xf76 <__cmpsf2>
     c4c:	18 16       	cp	r1, r24
     c4e:	5c f0       	brlt	.+22     	; 0xc66 <ledLightThird+0x58>
		{
			OCR1B=0;
     c50:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     c54:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     c58:	83 ec       	ldi	r24, 0xC3	; 195
     c5a:	99 e0       	ldi	r25, 0x09	; 9
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <ledLightThird+0x4e>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <ledLightThird+0x54>
     c62:	00 00       	nop
     c64:	3a c0       	rjmp	.+116    	; 0xcda <ledLightThird+0xcc>
			_delay_ms(10);
			
		}
		else if (count>35)
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4c e0       	ldi	r20, 0x0C	; 12
     c6c:	52 e4       	ldi	r21, 0x42	; 66
     c6e:	c7 01       	movw	r24, r14
     c70:	b6 01       	movw	r22, r12
     c72:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     c76:	18 16       	cp	r1, r24
     c78:	84 f5       	brge	.+96     	; 0xcda <ledLightThird+0xcc>
		{
			if (count>40)
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e2       	ldi	r20, 0x20	; 32
     c80:	52 e4       	ldi	r21, 0x42	; 66
     c82:	c7 01       	movw	r24, r14
     c84:	b6 01       	movw	r22, r12
     c86:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     c8a:	18 16       	cp	r1, r24
     c8c:	5c f4       	brge	.+22     	; 0xca4 <ledLightThird+0x96>
			{
				OCR1B=0;
     c8e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     c92:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     c96:	83 ec       	ldi	r24, 0xC3	; 195
     c98:	99 e0       	ldi	r25, 0x09	; 9
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <ledLightThird+0x8c>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <ledLightThird+0x92>
     ca0:	00 00       	nop
     ca2:	1b c0       	rjmp	.+54     	; 0xcda <ledLightThird+0xcc>
				_delay_ms(10);
			}
			else{
			int temp =count;
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
     ca8:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
			temp=temp%35;
     cac:	cb 01       	movw	r24, r22
     cae:	63 e2       	ldi	r22, 0x23	; 35
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
			temp=temp*100;
			
			OCR1B = temp; // Use OCR1B instead of OCR1A
     cb6:	44 e6       	ldi	r20, 0x64	; 100
     cb8:	48 9f       	mul	r20, r24
     cba:	90 01       	movw	r18, r0
     cbc:	49 9f       	mul	r20, r25
     cbe:	30 0d       	add	r19, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	ea e8       	ldi	r30, 0x8A	; 138
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	83 ec       	ldi	r24, 0xC3	; 195
     ccc:	99 e0       	ldi	r25, 0x09	; 9
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <ledLightThird+0xc0>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <ledLightThird+0xc6>
     cd4:	00 00       	nop
			_delay_ms(10); // Delay to slow down the brightness change
			OCR1B=0;
     cd6:	11 82       	std	Z+1, r1	; 0x01
     cd8:	10 82       	st	Z, r1
			}
		}
	
		
	if (!(PIND & (1<<BUTTON_PIN4))){
     cda:	48 99       	sbic	0x09, 0	; 9
     cdc:	11 c0       	rjmp	.+34     	; 0xd00 <ledLightThird+0xf2>
		if (faranCels==0)
     cde:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     ce2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     ce6:	89 2b       	or	r24, r25
     ce8:	39 f4       	brne	.+14     	; 0xcf8 <ledLightThird+0xea>
		{
			faranCels=1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <faranCels+0x1>
     cf2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <faranCels>
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <ledLightThird+0xf2>
		}
		else {
			faranCels=0;
     cf8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     cfc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
		}
	}
	
	if (!(PIND & (1<<BUTTON_PIN5))){
     d00:	49 99       	sbic	0x09, 1	; 9
     d02:	11 c0       	rjmp	.+34     	; 0xd26 <ledLightThird+0x118>
			if (modeShift==0)
     d04:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     d08:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     d0c:	89 2b       	or	r24, r25
     d0e:	39 f4       	brne	.+14     	; 0xd1e <ledLightThird+0x110>
			{
				modeShift=1;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     d18:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <ledLightThird+0x118>
			}
			else {
				modeShift=0;
     d1e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     d22:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			}
		}
		
	if (!(PIND & (1<<BUTTON_PIN3))){
     d26:	4c 99       	sbic	0x09, 4	; 9
     d28:	08 c0       	rjmp	.+16     	; 0xd3a <ledLightThird+0x12c>
		resetvalue=0;
     d2a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetvalue>
     d2e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <resetvalue+0x1>
     d32:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <resetvalue+0x2>
     d36:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <resetvalue+0x3>
	
	

	

}
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	08 95       	ret

00000d44 <run3>:

// mode display LIght only

void run3(int vlaue){
	
	ledLight(count);
     d44:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <count>
     d48:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <count+0x1>
     d4c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count+0x2>
     d50:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x3>
     d54:	0e 94 06 05 	call	0xa0c	; 0xa0c <ledLight>
	ledLightSecond(count);
     d58:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <count>
     d5c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <count+0x1>
     d60:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count+0x2>
     d64:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x3>
     d68:	0e 94 6c 05 	call	0xad8	; 0xad8 <ledLightSecond>
	ledLightThird(count);
     d6c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <count>
     d70:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <count+0x1>
     d74:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count+0x2>
     d78:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x3>
     d7c:	0e 94 07 06 	call	0xc0e	; 0xc0e <ledLightThird>
	
	PORTB &=~(1<<sw4);
     d80:	2d 98       	cbi	0x05, 5	; 5
	
		if (!(PIND & (1<<BUTTON_PIN4))){
     d82:	48 99       	sbic	0x09, 0	; 9
     d84:	11 c0       	rjmp	.+34     	; 0xda8 <run3+0x64>
			if (faranCels==0)
     d86:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     d8a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     d8e:	89 2b       	or	r24, r25
     d90:	39 f4       	brne	.+14     	; 0xda0 <run3+0x5c>
			{
				faranCels=1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <faranCels+0x1>
     d9a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <faranCels>
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <run3+0x64>
				
			}
			else {
				faranCels=0;
     da0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     da4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
				
			}
		}
		
		if (!(PIND & (1<<BUTTON_PIN5))){
     da8:	49 99       	sbic	0x09, 1	; 9
     daa:	11 c0       	rjmp	.+34     	; 0xdce <run3+0x8a>
			if (modeShift==0)
     dac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     db0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     db4:	89 2b       	or	r24, r25
     db6:	39 f4       	brne	.+14     	; 0xdc6 <run3+0x82>
			{
				modeShift=1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
     dc0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <run3+0x8a>
			}
			else {
				modeShift=0;
     dc6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     dca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			}
		}
		
		if (resetvalue>40)
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e2       	ldi	r20, 0x20	; 32
     dd4:	52 e4       	ldi	r21, 0x42	; 66
     dd6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <resetvalue>
     dda:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <resetvalue+0x1>
     dde:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <resetvalue+0x2>
     de2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <resetvalue+0x3>
     de6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__gesf2>
     dea:	18 16       	cp	r1, r24
     dec:	44 f4       	brge	.+16     	; 0xdfe <run3+0xba>
		{
			PORTC |=(1<<Led_Light);
     dee:	44 9a       	sbi	0x08, 4	; 8
     df0:	83 ed       	ldi	r24, 0xD3	; 211
     df2:	90 e3       	ldi	r25, 0x30	; 48
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <run3+0xb0>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <run3+0xb6>
     dfa:	00 00       	nop
			_delay_ms(50);
			PORTC &=~(1<<Led_Light);
     dfc:	44 98       	cbi	0x08, 4	; 8
     dfe:	08 95       	ret

00000e00 <finalRun>:

// run final 

void finalRun(){
	
	if(modeShift==0){
     e00:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     e04:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	61 f4       	brne	.+24     	; 0xe24 <finalRun+0x24>
		if (faranCels ==0)
     e0c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     e10:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     e14:	89 2b       	or	r24, r25
     e16:	19 f4       	brne	.+6      	; 0xe1e <finalRun+0x1e>
		{
			run2();
     e18:	0e 94 bb 04 	call	0x976	; 0x976 <run2>
     e1c:	08 95       	ret
		
		}
		else
		{
			run1();
     e1e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <run1>
     e22:	08 95       	ret
		}
	}
	else if(modeShift==1)
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	69 f4       	brne	.+26     	; 0xe42 <finalRun+0x42>
		{
			run3(resetvalue);
     e28:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <resetvalue>
     e2c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <resetvalue+0x1>
     e30:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <resetvalue+0x2>
     e34:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <resetvalue+0x3>
     e38:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixsfsi>
     e3c:	cb 01       	movw	r24, r22
     e3e:	0e 94 a2 06 	call	0xd44	; 0xd44 <run3>
     e42:	08 95       	ret

00000e44 <main>:



int main(void)
{
	setup();
     e44:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	PORTD |=(1<<BUTTON_PIN3)|(1<<BUTTON_PIN4)|(1<<BUTTON_PIN5);
     e48:	8b b1       	in	r24, 0x0b	; 11
     e4a:	83 61       	ori	r24, 0x13	; 19
     e4c:	8b b9       	out	0x0b, r24	; 11
	while(1){
		
	if (!(PIND & (1<<BUTTON_PIN4))){
		if (faranCels==0)
		{
			faranCels=1;
     e4e:	c1 e0       	ldi	r28, 0x01	; 1
     e50:	d0 e0       	ldi	r29, 0x00	; 0
{
	setup();
	PORTD |=(1<<BUTTON_PIN3)|(1<<BUTTON_PIN4)|(1<<BUTTON_PIN5);
	while(1){
		
	if (!(PIND & (1<<BUTTON_PIN4))){
     e52:	48 99       	sbic	0x09, 0	; 9
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <main+0x30>
		if (faranCels==0)
     e56:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <faranCels>
     e5a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <faranCels+0x1>
     e5e:	89 2b       	or	r24, r25
     e60:	29 f4       	brne	.+10     	; 0xe6c <main+0x28>
		{
			faranCels=1;
     e62:	d0 93 11 01 	sts	0x0111, r29	; 0x800111 <faranCels+0x1>
     e66:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <faranCels>
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <main+0x30>
		}
		else {
			faranCels=0;
     e6c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <faranCels+0x1>
     e70:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <faranCels>
		}
	}
	
	if (!(PIND & (1<<BUTTON_PIN5))){
     e74:	49 99       	sbic	0x09, 1	; 9
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <main+0x52>
			if (modeShift==0)
     e78:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     e7c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
     e80:	89 2b       	or	r24, r25
     e82:	29 f4       	brne	.+10     	; 0xe8e <main+0x4a>
			{
				modeShift=1;
     e84:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <__data_end+0x1>
     e88:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <__data_end>
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <main+0x52>
			}
			else {
				modeShift=0;
     e8e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
     e92:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
			}
		}
		
	
	finalRun();
     e96:	0e 94 00 07 	call	0xe00	; 0xe00 <finalRun>
	
	}
     e9a:	db cf       	rjmp	.-74     	; 0xe52 <main+0xe>

00000e9c <__subsf3>:
     e9c:	50 58       	subi	r21, 0x80	; 128

00000e9e <__addsf3>:
     e9e:	bb 27       	eor	r27, r27
     ea0:	aa 27       	eor	r26, r26
     ea2:	0e 94 66 07 	call	0xecc	; 0xecc <__addsf3x>
     ea6:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>
     eaa:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscA>
     eae:	38 f0       	brcs	.+14     	; 0xebe <__addsf3+0x20>
     eb0:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscB>
     eb4:	20 f0       	brcs	.+8      	; 0xebe <__addsf3+0x20>
     eb6:	39 f4       	brne	.+14     	; 0xec6 <__addsf3+0x28>
     eb8:	9f 3f       	cpi	r25, 0xFF	; 255
     eba:	19 f4       	brne	.+6      	; 0xec2 <__addsf3+0x24>
     ebc:	26 f4       	brtc	.+8      	; 0xec6 <__addsf3+0x28>
     ebe:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
     ec2:	0e f4       	brtc	.+2      	; 0xec6 <__addsf3+0x28>
     ec4:	e0 95       	com	r30
     ec6:	e7 fb       	bst	r30, 7
     ec8:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>

00000ecc <__addsf3x>:
     ecc:	e9 2f       	mov	r30, r25
     ece:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_split3>
     ed2:	58 f3       	brcs	.-42     	; 0xeaa <__addsf3+0xc>
     ed4:	ba 17       	cp	r27, r26
     ed6:	62 07       	cpc	r22, r18
     ed8:	73 07       	cpc	r23, r19
     eda:	84 07       	cpc	r24, r20
     edc:	95 07       	cpc	r25, r21
     ede:	20 f0       	brcs	.+8      	; 0xee8 <__addsf3x+0x1c>
     ee0:	79 f4       	brne	.+30     	; 0xf00 <__addsf3x+0x34>
     ee2:	a6 f5       	brtc	.+104    	; 0xf4c <__addsf3x+0x80>
     ee4:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_zero>
     ee8:	0e f4       	brtc	.+2      	; 0xeec <__addsf3x+0x20>
     eea:	e0 95       	com	r30
     eec:	0b 2e       	mov	r0, r27
     eee:	ba 2f       	mov	r27, r26
     ef0:	a0 2d       	mov	r26, r0
     ef2:	0b 01       	movw	r0, r22
     ef4:	b9 01       	movw	r22, r18
     ef6:	90 01       	movw	r18, r0
     ef8:	0c 01       	movw	r0, r24
     efa:	ca 01       	movw	r24, r20
     efc:	a0 01       	movw	r20, r0
     efe:	11 24       	eor	r1, r1
     f00:	ff 27       	eor	r31, r31
     f02:	59 1b       	sub	r21, r25
     f04:	99 f0       	breq	.+38     	; 0xf2c <__addsf3x+0x60>
     f06:	59 3f       	cpi	r21, 0xF9	; 249
     f08:	50 f4       	brcc	.+20     	; 0xf1e <__addsf3x+0x52>
     f0a:	50 3e       	cpi	r21, 0xE0	; 224
     f0c:	68 f1       	brcs	.+90     	; 0xf68 <__addsf3x+0x9c>
     f0e:	1a 16       	cp	r1, r26
     f10:	f0 40       	sbci	r31, 0x00	; 0
     f12:	a2 2f       	mov	r26, r18
     f14:	23 2f       	mov	r18, r19
     f16:	34 2f       	mov	r19, r20
     f18:	44 27       	eor	r20, r20
     f1a:	58 5f       	subi	r21, 0xF8	; 248
     f1c:	f3 cf       	rjmp	.-26     	; 0xf04 <__addsf3x+0x38>
     f1e:	46 95       	lsr	r20
     f20:	37 95       	ror	r19
     f22:	27 95       	ror	r18
     f24:	a7 95       	ror	r26
     f26:	f0 40       	sbci	r31, 0x00	; 0
     f28:	53 95       	inc	r21
     f2a:	c9 f7       	brne	.-14     	; 0xf1e <__addsf3x+0x52>
     f2c:	7e f4       	brtc	.+30     	; 0xf4c <__addsf3x+0x80>
     f2e:	1f 16       	cp	r1, r31
     f30:	ba 0b       	sbc	r27, r26
     f32:	62 0b       	sbc	r22, r18
     f34:	73 0b       	sbc	r23, r19
     f36:	84 0b       	sbc	r24, r20
     f38:	ba f0       	brmi	.+46     	; 0xf68 <__addsf3x+0x9c>
     f3a:	91 50       	subi	r25, 0x01	; 1
     f3c:	a1 f0       	breq	.+40     	; 0xf66 <__addsf3x+0x9a>
     f3e:	ff 0f       	add	r31, r31
     f40:	bb 1f       	adc	r27, r27
     f42:	66 1f       	adc	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	88 1f       	adc	r24, r24
     f48:	c2 f7       	brpl	.-16     	; 0xf3a <__addsf3x+0x6e>
     f4a:	0e c0       	rjmp	.+28     	; 0xf68 <__addsf3x+0x9c>
     f4c:	ba 0f       	add	r27, r26
     f4e:	62 1f       	adc	r22, r18
     f50:	73 1f       	adc	r23, r19
     f52:	84 1f       	adc	r24, r20
     f54:	48 f4       	brcc	.+18     	; 0xf68 <__addsf3x+0x9c>
     f56:	87 95       	ror	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	f7 95       	ror	r31
     f60:	9e 3f       	cpi	r25, 0xFE	; 254
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__addsf3x+0x9a>
     f64:	b0 cf       	rjmp	.-160    	; 0xec6 <__addsf3+0x28>
     f66:	93 95       	inc	r25
     f68:	88 0f       	add	r24, r24
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <__addsf3x+0xa2>
     f6c:	99 27       	eor	r25, r25
     f6e:	ee 0f       	add	r30, r30
     f70:	97 95       	ror	r25
     f72:	87 95       	ror	r24
     f74:	08 95       	ret

00000f76 <__cmpsf2>:
     f76:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fp_cmp>
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <__cmpsf2+0x8>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	08 95       	ret

00000f80 <__divsf3>:
     f80:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__divsf3x>
     f84:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>
     f88:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscB>
     f8c:	58 f0       	brcs	.+22     	; 0xfa4 <__divsf3+0x24>
     f8e:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscA>
     f92:	40 f0       	brcs	.+16     	; 0xfa4 <__divsf3+0x24>
     f94:	29 f4       	brne	.+10     	; 0xfa0 <__divsf3+0x20>
     f96:	5f 3f       	cpi	r21, 0xFF	; 255
     f98:	29 f0       	breq	.+10     	; 0xfa4 <__divsf3+0x24>
     f9a:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
     f9e:	51 11       	cpse	r21, r1
     fa0:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
     fa4:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>

00000fa8 <__divsf3x>:
     fa8:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_split3>
     fac:	68 f3       	brcs	.-38     	; 0xf88 <__divsf3+0x8>

00000fae <__divsf3_pse>:
     fae:	99 23       	and	r25, r25
     fb0:	b1 f3       	breq	.-20     	; 0xf9e <__divsf3+0x1e>
     fb2:	55 23       	and	r21, r21
     fb4:	91 f3       	breq	.-28     	; 0xf9a <__divsf3+0x1a>
     fb6:	95 1b       	sub	r25, r21
     fb8:	55 0b       	sbc	r21, r21
     fba:	bb 27       	eor	r27, r27
     fbc:	aa 27       	eor	r26, r26
     fbe:	62 17       	cp	r22, r18
     fc0:	73 07       	cpc	r23, r19
     fc2:	84 07       	cpc	r24, r20
     fc4:	38 f0       	brcs	.+14     	; 0xfd4 <__divsf3_pse+0x26>
     fc6:	9f 5f       	subi	r25, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	44 1f       	adc	r20, r20
     fd0:	aa 1f       	adc	r26, r26
     fd2:	a9 f3       	breq	.-22     	; 0xfbe <__divsf3_pse+0x10>
     fd4:	35 d0       	rcall	.+106    	; 0x1040 <__divsf3_pse+0x92>
     fd6:	0e 2e       	mov	r0, r30
     fd8:	3a f0       	brmi	.+14     	; 0xfe8 <__divsf3_pse+0x3a>
     fda:	e0 e8       	ldi	r30, 0x80	; 128
     fdc:	32 d0       	rcall	.+100    	; 0x1042 <__divsf3_pse+0x94>
     fde:	91 50       	subi	r25, 0x01	; 1
     fe0:	50 40       	sbci	r21, 0x00	; 0
     fe2:	e6 95       	lsr	r30
     fe4:	00 1c       	adc	r0, r0
     fe6:	ca f7       	brpl	.-14     	; 0xfda <__divsf3_pse+0x2c>
     fe8:	2b d0       	rcall	.+86     	; 0x1040 <__divsf3_pse+0x92>
     fea:	fe 2f       	mov	r31, r30
     fec:	29 d0       	rcall	.+82     	; 0x1040 <__divsf3_pse+0x92>
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	88 1f       	adc	r24, r24
     ff4:	bb 1f       	adc	r27, r27
     ff6:	26 17       	cp	r18, r22
     ff8:	37 07       	cpc	r19, r23
     ffa:	48 07       	cpc	r20, r24
     ffc:	ab 07       	cpc	r26, r27
     ffe:	b0 e8       	ldi	r27, 0x80	; 128
    1000:	09 f0       	breq	.+2      	; 0x1004 <__divsf3_pse+0x56>
    1002:	bb 0b       	sbc	r27, r27
    1004:	80 2d       	mov	r24, r0
    1006:	bf 01       	movw	r22, r30
    1008:	ff 27       	eor	r31, r31
    100a:	93 58       	subi	r25, 0x83	; 131
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	3a f0       	brmi	.+14     	; 0x101e <__divsf3_pse+0x70>
    1010:	9e 3f       	cpi	r25, 0xFE	; 254
    1012:	51 05       	cpc	r21, r1
    1014:	78 f0       	brcs	.+30     	; 0x1034 <__divsf3_pse+0x86>
    1016:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    101a:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
    101e:	5f 3f       	cpi	r21, 0xFF	; 255
    1020:	e4 f3       	brlt	.-8      	; 0x101a <__divsf3_pse+0x6c>
    1022:	98 3e       	cpi	r25, 0xE8	; 232
    1024:	d4 f3       	brlt	.-12     	; 0x101a <__divsf3_pse+0x6c>
    1026:	86 95       	lsr	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b7 95       	ror	r27
    102e:	f7 95       	ror	r31
    1030:	9f 5f       	subi	r25, 0xFF	; 255
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__divsf3_pse+0x78>
    1034:	88 0f       	add	r24, r24
    1036:	91 1d       	adc	r25, r1
    1038:	96 95       	lsr	r25
    103a:	87 95       	ror	r24
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret
    1040:	e1 e0       	ldi	r30, 0x01	; 1
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	bb 1f       	adc	r27, r27
    104a:	62 17       	cp	r22, r18
    104c:	73 07       	cpc	r23, r19
    104e:	84 07       	cpc	r24, r20
    1050:	ba 07       	cpc	r27, r26
    1052:	20 f0       	brcs	.+8      	; 0x105c <__divsf3_pse+0xae>
    1054:	62 1b       	sub	r22, r18
    1056:	73 0b       	sbc	r23, r19
    1058:	84 0b       	sbc	r24, r20
    105a:	ba 0b       	sbc	r27, r26
    105c:	ee 1f       	adc	r30, r30
    105e:	88 f7       	brcc	.-30     	; 0x1042 <__divsf3_pse+0x94>
    1060:	e0 95       	com	r30
    1062:	08 95       	ret

00001064 <__fixsfsi>:
    1064:	0e 94 39 08 	call	0x1072	; 0x1072 <__fixunssfsi>
    1068:	68 94       	set
    106a:	b1 11       	cpse	r27, r1
    106c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
    1070:	08 95       	ret

00001072 <__fixunssfsi>:
    1072:	0e 94 bc 08 	call	0x1178	; 0x1178 <__fp_splitA>
    1076:	88 f0       	brcs	.+34     	; 0x109a <__fixunssfsi+0x28>
    1078:	9f 57       	subi	r25, 0x7F	; 127
    107a:	98 f0       	brcs	.+38     	; 0x10a2 <__fixunssfsi+0x30>
    107c:	b9 2f       	mov	r27, r25
    107e:	99 27       	eor	r25, r25
    1080:	b7 51       	subi	r27, 0x17	; 23
    1082:	b0 f0       	brcs	.+44     	; 0x10b0 <__fixunssfsi+0x3e>
    1084:	e1 f0       	breq	.+56     	; 0x10be <__fixunssfsi+0x4c>
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	1a f0       	brmi	.+6      	; 0x1096 <__fixunssfsi+0x24>
    1090:	ba 95       	dec	r27
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__fixunssfsi+0x14>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <__fixunssfsi+0x4c>
    1096:	b1 30       	cpi	r27, 0x01	; 1
    1098:	91 f0       	breq	.+36     	; 0x10be <__fixunssfsi+0x4c>
    109a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_zero>
    109e:	b1 e0       	ldi	r27, 0x01	; 1
    10a0:	08 95       	ret
    10a2:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_zero>
    10a6:	67 2f       	mov	r22, r23
    10a8:	78 2f       	mov	r23, r24
    10aa:	88 27       	eor	r24, r24
    10ac:	b8 5f       	subi	r27, 0xF8	; 248
    10ae:	39 f0       	breq	.+14     	; 0x10be <__fixunssfsi+0x4c>
    10b0:	b9 3f       	cpi	r27, 0xF9	; 249
    10b2:	cc f3       	brlt	.-14     	; 0x10a6 <__fixunssfsi+0x34>
    10b4:	86 95       	lsr	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b3 95       	inc	r27
    10bc:	d9 f7       	brne	.-10     	; 0x10b4 <__fixunssfsi+0x42>
    10be:	3e f4       	brtc	.+14     	; 0x10ce <__fixunssfsi+0x5c>
    10c0:	90 95       	com	r25
    10c2:	80 95       	com	r24
    10c4:	70 95       	com	r23
    10c6:	61 95       	neg	r22
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	08 95       	ret

000010d0 <__fp_cmp>:
    10d0:	99 0f       	add	r25, r25
    10d2:	00 08       	sbc	r0, r0
    10d4:	55 0f       	add	r21, r21
    10d6:	aa 0b       	sbc	r26, r26
    10d8:	e0 e8       	ldi	r30, 0x80	; 128
    10da:	fe ef       	ldi	r31, 0xFE	; 254
    10dc:	16 16       	cp	r1, r22
    10de:	17 06       	cpc	r1, r23
    10e0:	e8 07       	cpc	r30, r24
    10e2:	f9 07       	cpc	r31, r25
    10e4:	c0 f0       	brcs	.+48     	; 0x1116 <__fp_cmp+0x46>
    10e6:	12 16       	cp	r1, r18
    10e8:	13 06       	cpc	r1, r19
    10ea:	e4 07       	cpc	r30, r20
    10ec:	f5 07       	cpc	r31, r21
    10ee:	98 f0       	brcs	.+38     	; 0x1116 <__fp_cmp+0x46>
    10f0:	62 1b       	sub	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	95 0b       	sbc	r25, r21
    10f8:	39 f4       	brne	.+14     	; 0x1108 <__fp_cmp+0x38>
    10fa:	0a 26       	eor	r0, r26
    10fc:	61 f0       	breq	.+24     	; 0x1116 <__fp_cmp+0x46>
    10fe:	23 2b       	or	r18, r19
    1100:	24 2b       	or	r18, r20
    1102:	25 2b       	or	r18, r21
    1104:	21 f4       	brne	.+8      	; 0x110e <__fp_cmp+0x3e>
    1106:	08 95       	ret
    1108:	0a 26       	eor	r0, r26
    110a:	09 f4       	brne	.+2      	; 0x110e <__fp_cmp+0x3e>
    110c:	a1 40       	sbci	r26, 0x01	; 1
    110e:	a6 95       	lsr	r26
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	81 1d       	adc	r24, r1
    1114:	81 1d       	adc	r24, r1
    1116:	08 95       	ret

00001118 <__fp_inf>:
    1118:	97 f9       	bld	r25, 7
    111a:	9f 67       	ori	r25, 0x7F	; 127
    111c:	80 e8       	ldi	r24, 0x80	; 128
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	08 95       	ret

00001124 <__fp_nan>:
    1124:	9f ef       	ldi	r25, 0xFF	; 255
    1126:	80 ec       	ldi	r24, 0xC0	; 192
    1128:	08 95       	ret

0000112a <__fp_pscA>:
    112a:	00 24       	eor	r0, r0
    112c:	0a 94       	dec	r0
    112e:	16 16       	cp	r1, r22
    1130:	17 06       	cpc	r1, r23
    1132:	18 06       	cpc	r1, r24
    1134:	09 06       	cpc	r0, r25
    1136:	08 95       	ret

00001138 <__fp_pscB>:
    1138:	00 24       	eor	r0, r0
    113a:	0a 94       	dec	r0
    113c:	12 16       	cp	r1, r18
    113e:	13 06       	cpc	r1, r19
    1140:	14 06       	cpc	r1, r20
    1142:	05 06       	cpc	r0, r21
    1144:	08 95       	ret

00001146 <__fp_round>:
    1146:	09 2e       	mov	r0, r25
    1148:	03 94       	inc	r0
    114a:	00 0c       	add	r0, r0
    114c:	11 f4       	brne	.+4      	; 0x1152 <__fp_round+0xc>
    114e:	88 23       	and	r24, r24
    1150:	52 f0       	brmi	.+20     	; 0x1166 <__fp_round+0x20>
    1152:	bb 0f       	add	r27, r27
    1154:	40 f4       	brcc	.+16     	; 0x1166 <__fp_round+0x20>
    1156:	bf 2b       	or	r27, r31
    1158:	11 f4       	brne	.+4      	; 0x115e <__fp_round+0x18>
    115a:	60 ff       	sbrs	r22, 0
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <__fp_round+0x20>
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	08 95       	ret

00001168 <__fp_split3>:
    1168:	57 fd       	sbrc	r21, 7
    116a:	90 58       	subi	r25, 0x80	; 128
    116c:	44 0f       	add	r20, r20
    116e:	55 1f       	adc	r21, r21
    1170:	59 f0       	breq	.+22     	; 0x1188 <__fp_splitA+0x10>
    1172:	5f 3f       	cpi	r21, 0xFF	; 255
    1174:	71 f0       	breq	.+28     	; 0x1192 <__fp_splitA+0x1a>
    1176:	47 95       	ror	r20

00001178 <__fp_splitA>:
    1178:	88 0f       	add	r24, r24
    117a:	97 fb       	bst	r25, 7
    117c:	99 1f       	adc	r25, r25
    117e:	61 f0       	breq	.+24     	; 0x1198 <__fp_splitA+0x20>
    1180:	9f 3f       	cpi	r25, 0xFF	; 255
    1182:	79 f0       	breq	.+30     	; 0x11a2 <__fp_splitA+0x2a>
    1184:	87 95       	ror	r24
    1186:	08 95       	ret
    1188:	12 16       	cp	r1, r18
    118a:	13 06       	cpc	r1, r19
    118c:	14 06       	cpc	r1, r20
    118e:	55 1f       	adc	r21, r21
    1190:	f2 cf       	rjmp	.-28     	; 0x1176 <__fp_split3+0xe>
    1192:	46 95       	lsr	r20
    1194:	f1 df       	rcall	.-30     	; 0x1178 <__fp_splitA>
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <__fp_splitA+0x30>
    1198:	16 16       	cp	r1, r22
    119a:	17 06       	cpc	r1, r23
    119c:	18 06       	cpc	r1, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	f1 cf       	rjmp	.-30     	; 0x1184 <__fp_splitA+0xc>
    11a2:	86 95       	lsr	r24
    11a4:	71 05       	cpc	r23, r1
    11a6:	61 05       	cpc	r22, r1
    11a8:	08 94       	sec
    11aa:	08 95       	ret

000011ac <__fp_zero>:
    11ac:	e8 94       	clt

000011ae <__fp_szero>:
    11ae:	bb 27       	eor	r27, r27
    11b0:	66 27       	eor	r22, r22
    11b2:	77 27       	eor	r23, r23
    11b4:	cb 01       	movw	r24, r22
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__gesf2>:
    11ba:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fp_cmp>
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <__gesf2+0x8>
    11c0:	8f ef       	ldi	r24, 0xFF	; 255
    11c2:	08 95       	ret

000011c4 <__mulsf3>:
    11c4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__mulsf3x>
    11c8:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_round>
    11cc:	0e 94 95 08 	call	0x112a	; 0x112a <__fp_pscA>
    11d0:	38 f0       	brcs	.+14     	; 0x11e0 <__mulsf3+0x1c>
    11d2:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscB>
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <__mulsf3+0x1c>
    11d8:	95 23       	and	r25, r21
    11da:	11 f0       	breq	.+4      	; 0x11e0 <__mulsf3+0x1c>
    11dc:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    11e0:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_nan>
    11e4:	11 24       	eor	r1, r1
    11e6:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>

000011ea <__mulsf3x>:
    11ea:	0e 94 b4 08 	call	0x1168	; 0x1168 <__fp_split3>
    11ee:	70 f3       	brcs	.-36     	; 0x11cc <__mulsf3+0x8>

000011f0 <__mulsf3_pse>:
    11f0:	95 9f       	mul	r25, r21
    11f2:	c1 f3       	breq	.-16     	; 0x11e4 <__mulsf3+0x20>
    11f4:	95 0f       	add	r25, r21
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	55 1f       	adc	r21, r21
    11fa:	62 9f       	mul	r22, r18
    11fc:	f0 01       	movw	r30, r0
    11fe:	72 9f       	mul	r23, r18
    1200:	bb 27       	eor	r27, r27
    1202:	f0 0d       	add	r31, r0
    1204:	b1 1d       	adc	r27, r1
    1206:	63 9f       	mul	r22, r19
    1208:	aa 27       	eor	r26, r26
    120a:	f0 0d       	add	r31, r0
    120c:	b1 1d       	adc	r27, r1
    120e:	aa 1f       	adc	r26, r26
    1210:	64 9f       	mul	r22, r20
    1212:	66 27       	eor	r22, r22
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	66 1f       	adc	r22, r22
    121a:	82 9f       	mul	r24, r18
    121c:	22 27       	eor	r18, r18
    121e:	b0 0d       	add	r27, r0
    1220:	a1 1d       	adc	r26, r1
    1222:	62 1f       	adc	r22, r18
    1224:	73 9f       	mul	r23, r19
    1226:	b0 0d       	add	r27, r0
    1228:	a1 1d       	adc	r26, r1
    122a:	62 1f       	adc	r22, r18
    122c:	83 9f       	mul	r24, r19
    122e:	a0 0d       	add	r26, r0
    1230:	61 1d       	adc	r22, r1
    1232:	22 1f       	adc	r18, r18
    1234:	74 9f       	mul	r23, r20
    1236:	33 27       	eor	r19, r19
    1238:	a0 0d       	add	r26, r0
    123a:	61 1d       	adc	r22, r1
    123c:	23 1f       	adc	r18, r19
    123e:	84 9f       	mul	r24, r20
    1240:	60 0d       	add	r22, r0
    1242:	21 1d       	adc	r18, r1
    1244:	82 2f       	mov	r24, r18
    1246:	76 2f       	mov	r23, r22
    1248:	6a 2f       	mov	r22, r26
    124a:	11 24       	eor	r1, r1
    124c:	9f 57       	subi	r25, 0x7F	; 127
    124e:	50 40       	sbci	r21, 0x00	; 0
    1250:	9a f0       	brmi	.+38     	; 0x1278 <__mulsf3_pse+0x88>
    1252:	f1 f0       	breq	.+60     	; 0x1290 <__mulsf3_pse+0xa0>
    1254:	88 23       	and	r24, r24
    1256:	4a f0       	brmi	.+18     	; 0x126a <__mulsf3_pse+0x7a>
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	bb 1f       	adc	r27, r27
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	a9 f7       	brne	.-22     	; 0x1254 <__mulsf3_pse+0x64>
    126a:	9e 3f       	cpi	r25, 0xFE	; 254
    126c:	51 05       	cpc	r21, r1
    126e:	80 f0       	brcs	.+32     	; 0x1290 <__mulsf3_pse+0xa0>
    1270:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_inf>
    1274:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__fp_szero>
    1278:	5f 3f       	cpi	r21, 0xFF	; 255
    127a:	e4 f3       	brlt	.-8      	; 0x1274 <__mulsf3_pse+0x84>
    127c:	98 3e       	cpi	r25, 0xE8	; 232
    127e:	d4 f3       	brlt	.-12     	; 0x1274 <__mulsf3_pse+0x84>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b7 95       	ror	r27
    1288:	f7 95       	ror	r31
    128a:	e7 95       	ror	r30
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	c1 f7       	brne	.-16     	; 0x1280 <__mulsf3_pse+0x90>
    1290:	fe 2b       	or	r31, r30
    1292:	88 0f       	add	r24, r24
    1294:	91 1d       	adc	r25, r1
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret

0000129e <__divmodhi4>:
    129e:	97 fb       	bst	r25, 7
    12a0:	07 2e       	mov	r0, r23
    12a2:	16 f4       	brtc	.+4      	; 0x12a8 <__divmodhi4+0xa>
    12a4:	00 94       	com	r0
    12a6:	07 d0       	rcall	.+14     	; 0x12b6 <__divmodhi4_neg1>
    12a8:	77 fd       	sbrc	r23, 7
    12aa:	09 d0       	rcall	.+18     	; 0x12be <__divmodhi4_neg2>
    12ac:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__udivmodhi4>
    12b0:	07 fc       	sbrc	r0, 7
    12b2:	05 d0       	rcall	.+10     	; 0x12be <__divmodhi4_neg2>
    12b4:	3e f4       	brtc	.+14     	; 0x12c4 <__divmodhi4_exit>

000012b6 <__divmodhi4_neg1>:
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__divmodhi4_neg2>:
    12be:	70 95       	com	r23
    12c0:	61 95       	neg	r22
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255

000012c4 <__divmodhi4_exit>:
    12c4:	08 95       	ret

000012c6 <__udivmodhi4>:
    12c6:	aa 1b       	sub	r26, r26
    12c8:	bb 1b       	sub	r27, r27
    12ca:	51 e1       	ldi	r21, 0x11	; 17
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <__udivmodhi4_ep>

000012ce <__udivmodhi4_loop>:
    12ce:	aa 1f       	adc	r26, r26
    12d0:	bb 1f       	adc	r27, r27
    12d2:	a6 17       	cp	r26, r22
    12d4:	b7 07       	cpc	r27, r23
    12d6:	10 f0       	brcs	.+4      	; 0x12dc <__udivmodhi4_ep>
    12d8:	a6 1b       	sub	r26, r22
    12da:	b7 0b       	sbc	r27, r23

000012dc <__udivmodhi4_ep>:
    12dc:	88 1f       	adc	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	5a 95       	dec	r21
    12e2:	a9 f7       	brne	.-22     	; 0x12ce <__udivmodhi4_loop>
    12e4:	80 95       	com	r24
    12e6:	90 95       	com	r25
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	08 95       	ret

000012ee <_exit>:
    12ee:	f8 94       	cli

000012f0 <__stop_program>:
    12f0:	ff cf       	rjmp	.-2      	; 0x12f0 <__stop_program>
