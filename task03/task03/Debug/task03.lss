
task03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000f9c  00001030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010e  0080010e  0000103e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000103e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001277  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000805  00000000  00000000  0000238f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fe  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  000035fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001242  00000000  00000000  00003a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004c75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <main>
  9e:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
char F =0b01110001;
float b =32;

void setup()
{
	DDRC=0xff;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xff;
  aa:	84 b9       	out	0x04, r24	; 4
	DDRD =0x00;
  ac:	1a b8       	out	0x0a, r1	; 10
	DDRD &= ~(1 << BUTTON_PIN)&(1<<BUTTON_PIN2)&(1<<BUTTON_PIN3);
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	1a b8       	out	0x0a, r1	; 10
	PORTD |=(1<<BUTTON_PIN)|(1<<BUTTON_PIN2)|(1<<BUTTON_PIN3);
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	8c 61       	ori	r24, 0x1C	; 28
  b6:	8b b9       	out	0x0b, r24	; 11

	
	
	
	// Enable external interrupt INT0
	EIMSK |= (1 << INT0)|(1<<INT1);
  b8:	8d b3       	in	r24, 0x1d	; 29
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	8d bb       	out	0x1d, r24	; 29
	
	// Trigger on falling edge for INT0
	EICRA |= (1 << ISC01)|(1<<ISC11);
  be:	e9 e6       	ldi	r30, 0x69	; 105
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8a 60       	ori	r24, 0x0A	; 10
  c6:	80 83       	st	Z, r24
	
	// Enable global interrupts
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <__vector_1>:
	
	
}

ISR(INT0_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	// Toggle the LED state
	count++;
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e8       	ldi	r20, 0x80	; 128
  f4:	5f e3       	ldi	r21, 0x3F	; 63
  f6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <count>
  fa:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <count+0x1>
  fe:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count+0x2>
 102:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x3>
 106:	0e 94 a4 05 	call	0xb48	; 0xb48 <__addsf3>
 10a:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <count>
 10e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <count+0x1>
 112:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count+0x2>
 116:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count+0x3>
	resetvalue++;
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e8       	ldi	r20, 0x80	; 128
 120:	5f e3       	ldi	r21, 0x3F	; 63
 122:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 126:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 12a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 12e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 132:	0e 94 a4 05 	call	0xb48	; 0xb48 <__addsf3>
 136:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
 13a:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_end+0x1>
 13e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
 142:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
	
	

}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_2>:
ISR(INT1_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31

	if (count>0)
 192:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <count>
 196:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <count+0x1>
 19a:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <count+0x2>
 19e:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <count+0x3>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	a9 01       	movw	r20, r18
 1a8:	c7 01       	movw	r24, r14
 1aa:	b6 01       	movw	r22, r12
 1ac:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 1b0:	18 16       	cp	r1, r24
 1b2:	84 f4       	brge	.+32     	; 0x1d4 <__vector_2+0x6c>
	{
		count--;
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	5f e3       	ldi	r21, 0x3F	; 63
 1bc:	c7 01       	movw	r24, r14
 1be:	b6 01       	movw	r22, r12
 1c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <__subsf3>
 1c4:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <count>
 1c8:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <count+0x1>
 1cc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count+0x2>
 1d0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count+0x3>
		
		
	}

}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <displayCellsius>:
void displayCellsius(float count){
 1fe:	2f 92       	push	r2
 200:	3f 92       	push	r3
 202:	4f 92       	push	r4
 204:	5f 92       	push	r5
 206:	6f 92       	push	r6
 208:	7f 92       	push	r7
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	00 d0       	rcall	.+0      	; 0x224 <displayCellsius+0x26>
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	4b 01       	movw	r8, r22
 22a:	5c 01       	movw	r10, r24
	for(int i; i<20;i++){
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	10 e0       	ldi	r17, 0x00	; 0
		else if (count<1000)
		{
			int givenNumber =count*10;
			int decimalPart = givenNumber % 10;
			
			PORTB = (1<<sw1);
 230:	55 24       	eor	r5, r5
 232:	53 94       	inc	r5
			PORTC = num[givenNumber/1000 %10];
 234:	0f 2e       	mov	r0, r31
 236:	f8 ee       	ldi	r31, 0xE8	; 232
 238:	cf 2e       	mov	r12, r31
 23a:	f3 e0       	ldi	r31, 0x03	; 3
 23c:	df 2e       	mov	r13, r31
 23e:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB =(1<<sw2);
 240:	68 94       	set
 242:	66 24       	eor	r6, r6
 244:	63 f8       	bld	r6, 3
			PORTC = num[givenNumber/100 %10];
 246:	0f 2e       	mov	r0, r31
 248:	f4 e6       	ldi	r31, 0x64	; 100
 24a:	2f 2e       	mov	r2, r31
 24c:	31 2c       	mov	r3, r1
 24e:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB = (1<<sw3);
 250:	68 94       	set
 252:	77 24       	eor	r7, r7
 254:	74 f8       	bld	r7, 4
			PORTC |=(1<<decimalPoint);
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
 256:	68 94       	set
 258:	44 24       	eor	r4, r4
 25a:	45 f8       	bld	r4, 5
	}

}
void displayCellsius(float count){
	for(int i; i<20;i++){
		if (!(PIND & (1<<BUTTON_PIN3))){
 25c:	4c 99       	sbic	0x09, 4	; 9
 25e:	08 c0       	rjmp	.+16     	; 0x270 <displayCellsius+0x72>
			resetvalue =0;
 260:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 264:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 268:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end+0x2>
 26c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x3>
		}
		
		if (count<10)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e2       	ldi	r20, 0x20	; 32
 276:	51 e4       	ldi	r21, 0x41	; 65
 278:	c5 01       	movw	r24, r10
 27a:	b4 01       	movw	r22, r8
 27c:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 280:	88 23       	and	r24, r24
 282:	0c f0       	brlt	.+2      	; 0x286 <displayCellsius+0x88>
 284:	67 c0       	rjmp	.+206    	; 0x354 <displayCellsius+0x156>
		{
			int givenNumber =count*1000;
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	4a e7       	ldi	r20, 0x7A	; 122
 28c:	54 e4       	ldi	r21, 0x44	; 68
 28e:	c5 01       	movw	r24, r10
 290:	b4 01       	movw	r22, r8
 292:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 296:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
			int decimalPart = givenNumber % 1000;
 29a:	cb 01       	movw	r24, r22
 29c:	b6 01       	movw	r22, r12
 29e:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 2a2:	9c 01       	movw	r18, r24
			
			
			PORTB =(1<<sw1);
 2a4:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/1000 %10];
 2a6:	cb 01       	movw	r24, r22
 2a8:	6a e0       	ldi	r22, 0x0A	; 10
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 2b0:	fc 01       	movw	r30, r24
 2b2:	ec 5f       	subi	r30, 0xFC	; 252
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 81       	ld	r24, Z
 2b8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f e3       	ldi	r24, 0x3F	; 63
 2bc:	9c e9       	ldi	r25, 0x9C	; 156
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <displayCellsius+0xc0>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <displayCellsius+0xc6>
 2c4:	00 00       	nop
			_delay_ms(160);
			PORTC |=(1<<decimalPoint);
 2c6:	45 9a       	sbi	0x08, 5	; 8
 2c8:	8f e1       	ldi	r24, 0x1F	; 31
 2ca:	9e e4       	ldi	r25, 0x4E	; 78
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <displayCellsius+0xce>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <displayCellsius+0xd4>
 2d2:	00 00       	nop
			_delay_ms(80);
			PORTC &=~(1<<decimalPoint);
 2d4:	45 98       	cbi	0x08, 5	; 8
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <displayCellsius+0xdc>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <displayCellsius+0xe2>
 2e0:	00 00       	nop
			_delay_ms(80);
			
			
			
			PORTB = (1<<sw2);
 2e2:	65 b8       	out	0x05, r6	; 5
			PORTC = num[decimalPart/100 %10];
 2e4:	c9 01       	movw	r24, r18
 2e6:	b1 01       	movw	r22, r2
 2e8:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 2ec:	cb 01       	movw	r24, r22
 2ee:	6a e0       	ldi	r22, 0x0A	; 10
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 2f6:	fc 01       	movw	r30, r24
 2f8:	ec 5f       	subi	r30, 0xFC	; 252
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	80 81       	ld	r24, Z
 2fe:	88 b9       	out	0x08, r24	; 8
 300:	8f e4       	ldi	r24, 0x4F	; 79
 302:	93 ec       	ldi	r25, 0xC3	; 195
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <displayCellsius+0x106>
 308:	00 c0       	rjmp	.+0      	; 0x30a <displayCellsius+0x10c>
 30a:	00 00       	nop
			_delay_ms(200);
			PORTB = (1<<sw3);
 30c:	75 b8       	out	0x05, r7	; 5
			PORTC = num[decimalPart/10 %10];
 30e:	c9 01       	movw	r24, r18
 310:	6a e0       	ldi	r22, 0x0A	; 10
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 318:	9c 01       	movw	r18, r24
 31a:	cb 01       	movw	r24, r22
 31c:	6a e0       	ldi	r22, 0x0A	; 10
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 324:	fc 01       	movw	r30, r24
 326:	ec 5f       	subi	r30, 0xFC	; 252
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	80 81       	ld	r24, Z
 32c:	88 b9       	out	0x08, r24	; 8
 32e:	8f e4       	ldi	r24, 0x4F	; 79
 330:	93 ec       	ldi	r25, 0xC3	; 195
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <displayCellsius+0x134>
 336:	00 c0       	rjmp	.+0      	; 0x338 <displayCellsius+0x13a>
 338:	00 00       	nop
			_delay_ms(200);
			PORTB = (1<<sw4);
 33a:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
 33c:	f9 01       	movw	r30, r18
 33e:	ec 5f       	subi	r30, 0xFC	; 252
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	80 81       	ld	r24, Z
 344:	88 b9       	out	0x08, r24	; 8
 346:	8f e4       	ldi	r24, 0x4F	; 79
 348:	93 ec       	ldi	r25, 0xC3	; 195
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <displayCellsius+0x14c>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <displayCellsius+0x152>
 350:	00 00       	nop
 352:	ff c0       	rjmp	.+510    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			
			
			
			
		}
		else if (count<100 )
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	48 ec       	ldi	r20, 0xC8	; 200
 35a:	52 e4       	ldi	r21, 0x42	; 66
 35c:	c5 01       	movw	r24, r10
 35e:	b4 01       	movw	r22, r8
 360:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 364:	88 23       	and	r24, r24
 366:	0c f0       	brlt	.+2      	; 0x36a <displayCellsius+0x16c>
 368:	81 c0       	rjmp	.+258    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		{
			int givenNumber =count*100;
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	48 ec       	ldi	r20, 0xC8	; 200
 370:	52 e4       	ldi	r21, 0x42	; 66
 372:	c5 01       	movw	r24, r10
 374:	b4 01       	movw	r22, r8
 376:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 37a:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
 37e:	7b 01       	movw	r14, r22
			int decimalPart = givenNumber % 100;
 380:	cb 01       	movw	r24, r22
 382:	b1 01       	movw	r22, r2
 384:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
			if (resetvalue>40)
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e2       	ldi	r20, 0x20	; 32
 392:	52 e4       	ldi	r21, 0x42	; 66
 394:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 398:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 39c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 3a0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 3a4:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 3a8:	18 16       	cp	r1, r24
 3aa:	4c f4       	brge	.+18     	; 0x3be <displayCellsius+0x1c0>
			{
				PORTC ^=(1<<Led_Light);
 3ac:	88 b1       	in	r24, 0x08	; 8
 3ae:	87 25       	eor	r24, r7
 3b0:	88 b9       	out	0x08, r24	; 8
 3b2:	87 ea       	ldi	r24, 0xA7	; 167
 3b4:	91 e6       	ldi	r25, 0x61	; 97
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <displayCellsius+0x1b8>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <displayCellsius+0x1be>
 3bc:	00 00       	nop
				_delay_ms(100);
				
			}
			
			
			PORTB =(1<<sw1);
 3be:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/1000 %10];
 3c0:	c7 01       	movw	r24, r14
 3c2:	b6 01       	movw	r22, r12
 3c4:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 3c8:	cb 01       	movw	r24, r22
 3ca:	6a e0       	ldi	r22, 0x0A	; 10
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 3d2:	fc 01       	movw	r30, r24
 3d4:	ec 5f       	subi	r30, 0xFC	; 252
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 81       	ld	r24, Z
 3da:	88 b9       	out	0x08, r24	; 8
 3dc:	8f e4       	ldi	r24, 0x4F	; 79
 3de:	93 ec       	ldi	r25, 0xC3	; 195
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <displayCellsius+0x1e2>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <displayCellsius+0x1e8>
 3e6:	00 00       	nop
			_delay_ms(200);
			
			PORTB=(1<<sw2);
 3e8:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/100 %10];
 3ea:	c7 01       	movw	r24, r14
 3ec:	b1 01       	movw	r22, r2
 3ee:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 3f2:	cb 01       	movw	r24, r22
 3f4:	6a e0       	ldi	r22, 0x0A	; 10
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 3fc:	fc 01       	movw	r30, r24
 3fe:	ec 5f       	subi	r30, 0xFC	; 252
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	80 81       	ld	r24, Z
 404:	88 b9       	out	0x08, r24	; 8
 406:	87 ec       	ldi	r24, 0xC7	; 199
 408:	9f ea       	ldi	r25, 0xAF	; 175
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
			_delay_ms(180);
			PORTC |=(1<<decimalPoint);
 412:	45 9a       	sbi	0x08, 5	; 8
 414:	8f e0       	ldi	r24, 0x0F	; 15
 416:	97 e2       	ldi	r25, 0x27	; 39
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
			_delay_ms(40);
			PORTC &=~(1<<decimalPoint);
 420:	45 98       	cbi	0x08, 5	; 8
			//_delay_ms(80);
			
			PORTB=(1<<sw3);
 422:	75 b8       	out	0x05, r7	; 5
			PORTC = num[decimalPart/10 %10];
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	6a e0       	ldi	r22, 0x0A	; 10
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 430:	9c 01       	movw	r18, r24
 432:	cb 01       	movw	r24, r22
 434:	6a e0       	ldi	r22, 0x0A	; 10
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 43c:	fc 01       	movw	r30, r24
 43e:	ec 5f       	subi	r30, 0xFC	; 252
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	80 81       	ld	r24, Z
 444:	88 b9       	out	0x08, r24	; 8
 446:	8f e4       	ldi	r24, 0x4F	; 79
 448:	93 ec       	ldi	r25, 0xC3	; 195
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 450:	00 00       	nop
			_delay_ms(200);
			PORTB =(1<<sw4);
 452:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
 454:	f9 01       	movw	r30, r18
 456:	ec 5f       	subi	r30, 0xFC	; 252
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	80 81       	ld	r24, Z
 45c:	88 b9       	out	0x08, r24	; 8
 45e:	8f e4       	ldi	r24, 0x4F	; 79
 460:	93 ec       	ldi	r25, 0xC3	; 195
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	73 c0       	rjmp	.+230    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			_delay_ms(200);
			
		}
		else if (count<1000)
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	4a e7       	ldi	r20, 0x7A	; 122
 472:	54 e4       	ldi	r21, 0x44	; 68
 474:	c5 01       	movw	r24, r10
 476:	b4 01       	movw	r22, r8
 478:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 47c:	88 23       	and	r24, r24
 47e:	0c f0       	brlt	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	68 c0       	rjmp	.+208    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
		{
			int givenNumber =count*10;
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	40 e2       	ldi	r20, 0x20	; 32
 488:	51 e4       	ldi	r21, 0x41	; 65
 48a:	c5 01       	movw	r24, r10
 48c:	b4 01       	movw	r22, r8
 48e:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 492:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
 496:	9b 01       	movw	r18, r22
			int decimalPart = givenNumber % 10;
			
			PORTB = (1<<sw1);
 498:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/1000 %10];
 49a:	cb 01       	movw	r24, r22
 49c:	b6 01       	movw	r22, r12
 49e:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 4a2:	cb 01       	movw	r24, r22
 4a4:	6a e0       	ldi	r22, 0x0A	; 10
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 4ac:	fc 01       	movw	r30, r24
 4ae:	ec 5f       	subi	r30, 0xFC	; 252
 4b0:	fe 4f       	sbci	r31, 0xFE	; 254
 4b2:	80 81       	ld	r24, Z
 4b4:	88 b9       	out	0x08, r24	; 8
 4b6:	8f e4       	ldi	r24, 0x4F	; 79
 4b8:	93 ec       	ldi	r25, 0xC3	; 195
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
			_delay_ms(200);
			
			PORTB =(1<<sw2);
 4c2:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/100 %10];
 4c4:	c9 01       	movw	r24, r18
 4c6:	b1 01       	movw	r22, r2
 4c8:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 4cc:	cb 01       	movw	r24, r22
 4ce:	6a e0       	ldi	r22, 0x0A	; 10
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 4d6:	fc 01       	movw	r30, r24
 4d8:	ec 5f       	subi	r30, 0xFC	; 252
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	80 81       	ld	r24, Z
 4de:	88 b9       	out	0x08, r24	; 8
 4e0:	8f e4       	ldi	r24, 0x4F	; 79
 4e2:	93 ec       	ldi	r25, 0xC3	; 195
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4ea:	00 00       	nop
			_delay_ms(200);
			
			PORTB = (1<<sw3);
 4ec:	75 b8       	out	0x05, r7	; 5
			PORTC = num[givenNumber/10 %10];
 4ee:	c9 01       	movw	r24, r18
 4f0:	6a e0       	ldi	r22, 0x0A	; 10
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 4f8:	9c 01       	movw	r18, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	6a e0       	ldi	r22, 0x0A	; 10
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 504:	fc 01       	movw	r30, r24
 506:	ec 5f       	subi	r30, 0xFC	; 252
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	80 81       	ld	r24, Z
 50c:	88 b9       	out	0x08, r24	; 8
 50e:	8b e1       	ldi	r24, 0x1B	; 27
 510:	91 e4       	ldi	r25, 0x41	; 65
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 516:	00 00       	nop
			_delay_ms(66.67);
			PORTC |=(1<<decimalPoint);
 518:	45 9a       	sbi	0x08, 5	; 8
 51a:	8b e1       	ldi	r24, 0x1B	; 27
 51c:	91 e4       	ldi	r25, 0x41	; 65
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 522:	00 00       	nop
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
 524:	45 98       	cbi	0x08, 5	; 8
 526:	8b e1       	ldi	r24, 0x1B	; 27
 528:	91 e4       	ldi	r25, 0x41	; 65
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 52e:	00 00       	nop
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
 530:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
 532:	c9 01       	movw	r24, r18
 534:	6a e0       	ldi	r22, 0x0A	; 10
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 53c:	fc 01       	movw	r30, r24
 53e:	ec 5f       	subi	r30, 0xFC	; 252
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	80 81       	ld	r24, Z
 544:	88 b9       	out	0x08, r24	; 8
 546:	8f e4       	ldi	r24, 0x4F	; 79
 548:	93 ec       	ldi	r25, 0xC3	; 195
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 550:	00 00       	nop
		
	}

}
void displayCellsius(float count){
	for(int i; i<20;i++){
 552:	0f 5f       	subi	r16, 0xFF	; 255
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	04 31       	cpi	r16, 0x14	; 20
 558:	11 05       	cpc	r17, r1
 55a:	09 f0       	breq	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55c:	7f ce       	rjmp	.-770    	; 0x25c <displayCellsius+0x5e>
			
			
		}
	}

}
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	bf 90       	pop	r11
 574:	af 90       	pop	r10
 576:	9f 90       	pop	r9
 578:	8f 90       	pop	r8
 57a:	7f 90       	pop	r7
 57c:	6f 90       	pop	r6
 57e:	5f 90       	pop	r5
 580:	4f 90       	pop	r4
 582:	3f 90       	pop	r3
 584:	2f 90       	pop	r2
 586:	08 95       	ret

00000588 <displayFaran>:



void displayFaran(float b){
 588:	2f 92       	push	r2
 58a:	3f 92       	push	r3
 58c:	4f 92       	push	r4
 58e:	5f 92       	push	r5
 590:	6f 92       	push	r6
 592:	7f 92       	push	r7
 594:	8f 92       	push	r8
 596:	9f 92       	push	r9
 598:	af 92       	push	r10
 59a:	bf 92       	push	r11
 59c:	cf 92       	push	r12
 59e:	df 92       	push	r13
 5a0:	ef 92       	push	r14
 5a2:	ff 92       	push	r15
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <displayFaran+0x26>
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	4b 01       	movw	r8, r22
 5b4:	5c 01       	movw	r10, r24
	
	for(int j;j<20;j++){
 5b6:	00 e0       	ldi	r16, 0x00	; 0
 5b8:	10 e0       	ldi	r17, 0x00	; 0
				_delay_ms(100);
				
			}
			
			
			PORTB = (1<<sw1);
 5ba:	66 24       	eor	r6, r6
 5bc:	63 94       	inc	r6
			PORTC = num[givenNumber/1000 %10];
 5be:	0f 2e       	mov	r0, r31
 5c0:	f8 ee       	ldi	r31, 0xE8	; 232
 5c2:	2f 2e       	mov	r2, r31
 5c4:	f3 e0       	ldi	r31, 0x03	; 3
 5c6:	3f 2e       	mov	r3, r31
 5c8:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB =(1<<sw2);
 5ca:	68 94       	set
 5cc:	55 24       	eor	r5, r5
 5ce:	53 f8       	bld	r5, 3
			PORTC = num[givenNumber/100 %10];
 5d0:	0f 2e       	mov	r0, r31
 5d2:	f4 e6       	ldi	r31, 0x64	; 100
 5d4:	cf 2e       	mov	r12, r31
 5d6:	d1 2c       	mov	r13, r1
 5d8:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			
			PORTB = (1<<sw3);
 5da:	68 94       	set
 5dc:	77 24       	eor	r7, r7
 5de:	74 f8       	bld	r7, 4
			PORTC |=(1<<decimalPoint);
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
 5e0:	68 94       	set
 5e2:	44 24       	eor	r4, r4
 5e4:	45 f8       	bld	r4, 5


void displayFaran(float b){
	
	for(int j;j<20;j++){
		if (!(PIND & (1<<BUTTON_PIN3))){
 5e6:	4c 99       	sbic	0x09, 4	; 9
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <displayFaran+0x72>
			resetvalue=0;
 5ea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 5ee:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 5f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end+0x2>
 5f6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x3>
		}


		if (b<100 )
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	48 ec       	ldi	r20, 0xC8	; 200
 600:	52 e4       	ldi	r21, 0x42	; 66
 602:	c5 01       	movw	r24, r10
 604:	b4 01       	movw	r22, r8
 606:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 60a:	88 23       	and	r24, r24
 60c:	0c f0       	brlt	.+2      	; 0x610 <displayFaran+0x88>
 60e:	62 c0       	rjmp	.+196    	; 0x6d4 <displayFaran+0x14c>
		{
			int givenNumber =b*100;
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	48 ec       	ldi	r20, 0xC8	; 200
 616:	52 e4       	ldi	r21, 0x42	; 66
 618:	c5 01       	movw	r24, r10
 61a:	b4 01       	movw	r22, r8
 61c:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 620:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
 624:	9b 01       	movw	r18, r22
			int decimalPart = givenNumber % 100;
 626:	cb 01       	movw	r24, r22
 628:	b6 01       	movw	r22, r12
 62a:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 62e:	7b 01       	movw	r14, r22
 630:	fc 01       	movw	r30, r24
			
			
			PORTB =(1<<sw1);
 632:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/1000 %10];
 634:	c9 01       	movw	r24, r18
 636:	b1 01       	movw	r22, r2
 638:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 63c:	cb 01       	movw	r24, r22
 63e:	6a e0       	ldi	r22, 0x0A	; 10
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 646:	dc 01       	movw	r26, r24
 648:	ac 5f       	subi	r26, 0xFC	; 252
 64a:	be 4f       	sbci	r27, 0xFE	; 254
 64c:	8c 91       	ld	r24, X
 64e:	88 b9       	out	0x08, r24	; 8
 650:	8f e4       	ldi	r24, 0x4F	; 79
 652:	93 ec       	ldi	r25, 0xC3	; 195
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <displayFaran+0xcc>
 658:	00 c0       	rjmp	.+0      	; 0x65a <displayFaran+0xd2>
 65a:	00 00       	nop
			_delay_ms(200);
			
			PORTB =(1<<sw2);
 65c:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/100 %10];
 65e:	c7 01       	movw	r24, r14
 660:	6a e0       	ldi	r22, 0x0A	; 10
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 668:	dc 01       	movw	r26, r24
 66a:	ac 5f       	subi	r26, 0xFC	; 252
 66c:	be 4f       	sbci	r27, 0xFE	; 254
 66e:	8c 91       	ld	r24, X
 670:	88 b9       	out	0x08, r24	; 8
 672:	8f e3       	ldi	r24, 0x3F	; 63
 674:	9c e9       	ldi	r25, 0x9C	; 156
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <displayFaran+0xee>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <displayFaran+0xf4>
 67c:	00 00       	nop
			_delay_ms(160);
			PORTC |=(1<<decimalPoint);
 67e:	45 9a       	sbi	0x08, 5	; 8
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	95 e4       	ldi	r25, 0x45	; 69
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <displayFaran+0xfc>
 688:	00 00       	nop
			_delay_ms(70.67);
			PORTC &=~(1<<decimalPoint);
 68a:	45 98       	cbi	0x08, 5	; 8
			//_delay_ms(66.67);
			
			PORTB = (1<<sw3);
 68c:	75 b8       	out	0x05, r7	; 5
			PORTC = num[decimalPart/10 %10];
 68e:	cf 01       	movw	r24, r30
 690:	6a e0       	ldi	r22, 0x0A	; 10
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 698:	9c 01       	movw	r18, r24
 69a:	cb 01       	movw	r24, r22
 69c:	6a e0       	ldi	r22, 0x0A	; 10
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 6a4:	fc 01       	movw	r30, r24
 6a6:	ec 5f       	subi	r30, 0xFC	; 252
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	80 81       	ld	r24, Z
 6ac:	88 b9       	out	0x08, r24	; 8
 6ae:	8f e4       	ldi	r24, 0x4F	; 79
 6b0:	93 ec       	ldi	r25, 0xC3	; 195
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <displayFaran+0x12a>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <displayFaran+0x130>
 6b8:	00 00       	nop
			_delay_ms(200);
			PORTB = (1<<sw4);
 6ba:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
 6bc:	f9 01       	movw	r30, r18
 6be:	ec 5f       	subi	r30, 0xFC	; 252
 6c0:	fe 4f       	sbci	r31, 0xFE	; 254
 6c2:	80 81       	ld	r24, Z
 6c4:	88 b9       	out	0x08, r24	; 8
 6c6:	8f e4       	ldi	r24, 0x4F	; 79
 6c8:	93 ec       	ldi	r25, 0xC3	; 195
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <displayFaran+0x142>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <displayFaran+0x148>
 6d0:	00 00       	nop
 6d2:	93 c0       	rjmp	.+294    	; 0x7fa <displayFaran+0x272>
			
			
			
			
		}
		else if (b<1000)
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	4a e7       	ldi	r20, 0x7A	; 122
 6da:	54 e4       	ldi	r21, 0x44	; 68
 6dc:	c5 01       	movw	r24, r10
 6de:	b4 01       	movw	r22, r8
 6e0:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 6e4:	88 23       	and	r24, r24
 6e6:	0c f0       	brlt	.+2      	; 0x6ea <displayFaran+0x162>
 6e8:	88 c0       	rjmp	.+272    	; 0x7fa <displayFaran+0x272>
		{
			int givenNumber =b*10;
 6ea:	20 e0       	ldi	r18, 0x00	; 0
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	40 e2       	ldi	r20, 0x20	; 32
 6f0:	51 e4       	ldi	r21, 0x41	; 65
 6f2:	c5 01       	movw	r24, r10
 6f4:	b4 01       	movw	r22, r8
 6f6:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 6fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
 6fe:	7b 01       	movw	r14, r22
			int decimalPart = givenNumber % 10;
 700:	cb 01       	movw	r24, r22
 702:	6a e0       	ldi	r22, 0x0A	; 10
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 70a:	9a 83       	std	Y+2, r25	; 0x02
 70c:	89 83       	std	Y+1, r24	; 0x01
			if (resetvalue>40)
 70e:	20 e0       	ldi	r18, 0x00	; 0
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	40 e2       	ldi	r20, 0x20	; 32
 714:	52 e4       	ldi	r21, 0x42	; 66
 716:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 71a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 71e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end+0x2>
 722:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x3>
 726:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 72a:	18 16       	cp	r1, r24
 72c:	4c f4       	brge	.+18     	; 0x740 <displayFaran+0x1b8>
			{
				PORTC ^=(1<<Led_Light);
 72e:	88 b1       	in	r24, 0x08	; 8
 730:	87 25       	eor	r24, r7
 732:	88 b9       	out	0x08, r24	; 8
 734:	87 ea       	ldi	r24, 0xA7	; 167
 736:	91 e6       	ldi	r25, 0x61	; 97
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <displayFaran+0x1b0>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <displayFaran+0x1b6>
 73e:	00 00       	nop
				_delay_ms(100);
				
			}
			
			
			PORTB = (1<<sw1);
 740:	65 b8       	out	0x05, r6	; 5
			PORTC = num[givenNumber/1000 %10];
 742:	c7 01       	movw	r24, r14
 744:	b1 01       	movw	r22, r2
 746:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 74a:	cb 01       	movw	r24, r22
 74c:	6a e0       	ldi	r22, 0x0A	; 10
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 754:	fc 01       	movw	r30, r24
 756:	ec 5f       	subi	r30, 0xFC	; 252
 758:	fe 4f       	sbci	r31, 0xFE	; 254
 75a:	80 81       	ld	r24, Z
 75c:	88 b9       	out	0x08, r24	; 8
 75e:	8f e4       	ldi	r24, 0x4F	; 79
 760:	93 ec       	ldi	r25, 0xC3	; 195
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <displayFaran+0x1da>
 766:	00 c0       	rjmp	.+0      	; 0x768 <displayFaran+0x1e0>
 768:	00 00       	nop
			_delay_ms(200);
			
			PORTB =(1<<sw2);
 76a:	55 b8       	out	0x05, r5	; 5
			PORTC = num[givenNumber/100 %10];
 76c:	c7 01       	movw	r24, r14
 76e:	b6 01       	movw	r22, r12
 770:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 774:	cb 01       	movw	r24, r22
 776:	6a e0       	ldi	r22, 0x0A	; 10
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 77e:	fc 01       	movw	r30, r24
 780:	ec 5f       	subi	r30, 0xFC	; 252
 782:	fe 4f       	sbci	r31, 0xFE	; 254
 784:	80 81       	ld	r24, Z
 786:	88 b9       	out	0x08, r24	; 8
 788:	8f e4       	ldi	r24, 0x4F	; 79
 78a:	93 ec       	ldi	r25, 0xC3	; 195
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <displayFaran+0x204>
 790:	00 c0       	rjmp	.+0      	; 0x792 <displayFaran+0x20a>
 792:	00 00       	nop
			_delay_ms(200);
			
			PORTB = (1<<sw3);
 794:	75 b8       	out	0x05, r7	; 5
			PORTC = num[givenNumber/10 %10];
 796:	c7 01       	movw	r24, r14
 798:	6a e0       	ldi	r22, 0x0A	; 10
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 7a0:	cb 01       	movw	r24, r22
 7a2:	6a e0       	ldi	r22, 0x0A	; 10
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 7aa:	fc 01       	movw	r30, r24
 7ac:	ec 5f       	subi	r30, 0xFC	; 252
 7ae:	fe 4f       	sbci	r31, 0xFE	; 254
 7b0:	80 81       	ld	r24, Z
 7b2:	88 b9       	out	0x08, r24	; 8
 7b4:	8b e1       	ldi	r24, 0x1B	; 27
 7b6:	91 e4       	ldi	r25, 0x41	; 65
 7b8:	01 97       	sbiw	r24, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <displayFaran+0x230>
 7bc:	00 00       	nop
			_delay_ms(66.67);
			PORTC |=(1<<decimalPoint);
 7be:	45 9a       	sbi	0x08, 5	; 8
 7c0:	8b e1       	ldi	r24, 0x1B	; 27
 7c2:	91 e4       	ldi	r25, 0x41	; 65
 7c4:	01 97       	sbiw	r24, 0x01	; 1
 7c6:	f1 f7       	brne	.-4      	; 0x7c4 <displayFaran+0x23c>
 7c8:	00 00       	nop
			_delay_ms(66.67);
			PORTC &=~(1<<decimalPoint);
 7ca:	45 98       	cbi	0x08, 5	; 8
 7cc:	8b e1       	ldi	r24, 0x1B	; 27
 7ce:	91 e4       	ldi	r25, 0x41	; 65
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <displayFaran+0x248>
 7d4:	00 00       	nop
			_delay_ms(66.67);
			
			PORTB =(1<<sw4);
 7d6:	45 b8       	out	0x05, r4	; 5
			PORTC = num[decimalPart/1 %10];
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	9a 81       	ldd	r25, Y+2	; 0x02
 7dc:	6a e0       	ldi	r22, 0x0A	; 10
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 7e4:	fc 01       	movw	r30, r24
 7e6:	ec 5f       	subi	r30, 0xFC	; 252
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	80 81       	ld	r24, Z
 7ec:	88 b9       	out	0x08, r24	; 8
 7ee:	8f e4       	ldi	r24, 0x4F	; 79
 7f0:	93 ec       	ldi	r25, 0xC3	; 195
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <displayFaran+0x26a>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <displayFaran+0x270>
 7f8:	00 00       	nop



void displayFaran(float b){
	
	for(int j;j<20;j++){
 7fa:	0f 5f       	subi	r16, 0xFF	; 255
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	04 31       	cpi	r16, 0x14	; 20
 800:	11 05       	cpc	r17, r1
 802:	09 f0       	breq	.+2      	; 0x806 <displayFaran+0x27e>
 804:	f0 ce       	rjmp	.-544    	; 0x5e6 <displayFaran+0x5e>
			
			
			
		}
	}
}
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	ff 90       	pop	r15
 814:	ef 90       	pop	r14
 816:	df 90       	pop	r13
 818:	cf 90       	pop	r12
 81a:	bf 90       	pop	r11
 81c:	af 90       	pop	r10
 81e:	9f 90       	pop	r9
 820:	8f 90       	pop	r8
 822:	7f 90       	pop	r7
 824:	6f 90       	pop	r6
 826:	5f 90       	pop	r5
 828:	4f 90       	pop	r4
 82a:	3f 90       	pop	r3
 82c:	2f 90       	pop	r2
 82e:	08 95       	ret

00000830 <ledLight>:
	
	
	
	
}
void ledLight(float num){
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	6b 01       	movw	r12, r22
 83a:	7c 01       	movw	r14, r24
		TCCR0A |=(1<<WGM00)|(1<<WGM01)|(1<<COM0A1) | (1<<COM0B1);//FAST PULSE WIDTH WGM01,WGM02
 83c:	84 b5       	in	r24, 0x24	; 36
 83e:	83 6a       	ori	r24, 0xA3	; 163
 840:	84 bd       	out	0x24, r24	; 36
		//SELCT NONINVERTING OUTPUT PD6 =COMOA1
		
		
		TCCR0B |=(1<<CS02);//FIND PRESCALER WITH FORMULA AND COME 256 AS A VALUE SET THIS VALUE TCROB REGISTER
 842:	85 b5       	in	r24, 0x25	; 37
 844:	84 60       	ori	r24, 0x04	; 4
 846:	85 bd       	out	0x25, r24	; 37
		
		DDRD|=(1<<LedCold) | (1<<LedNormal); //DEFINE OUTPUT
 848:	8a b1       	in	r24, 0x0a	; 10
 84a:	80 66       	ori	r24, 0x60	; 96
 84c:	8a b9       	out	0x0a, r24	; 10
		
		if (num <= 15)
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	40 e7       	ldi	r20, 0x70	; 112
 854:	51 e4       	ldi	r21, 0x41	; 65
 856:	c7 01       	movw	r24, r14
 858:	b6 01       	movw	r22, r12
 85a:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 85e:	18 16       	cp	r1, r24
 860:	94 f0       	brlt	.+36     	; 0x886 <ledLight+0x56>
		{
				num =num*16;
				OCR0A=num;
 862:	20 e0       	ldi	r18, 0x00	; 0
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	40 e8       	ldi	r20, 0x80	; 128
 868:	51 e4       	ldi	r21, 0x41	; 65
 86a:	c7 01       	movw	r24, r14
 86c:	b6 01       	movw	r22, r12
 86e:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 872:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fixunssfsi>
 876:	67 bd       	out	0x27, r22	; 39
 878:	83 ec       	ldi	r24, 0xC3	; 195
 87a:	99 e0       	ldi	r25, 0x09	; 9
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	f1 f7       	brne	.-4      	; 0x87c <ledLight+0x4c>
 880:	00 c0       	rjmp	.+0      	; 0x882 <ledLight+0x52>
 882:	00 00       	nop
 884:	2a c0       	rjmp	.+84     	; 0x8da <ledLight+0xaa>
				_delay_ms(10);
				
				
		}else if (num<=25)
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	48 ec       	ldi	r20, 0xC8	; 200
 88c:	51 e4       	ldi	r21, 0x41	; 65
 88e:	c7 01       	movw	r24, r14
 890:	b6 01       	movw	r22, r12
 892:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 896:	18 16       	cp	r1, r24
 898:	a4 f0       	brlt	.+40     	; 0x8c2 <ledLight+0x92>
		
		{
			OCR0A =0;
 89a:	17 bc       	out	0x27, r1	; 39
			int temp = num;
 89c:	c7 01       	movw	r24, r14
 89e:	b6 01       	movw	r22, r12
 8a0:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
			
			temp =temp%15;
			OCR0B =temp*16;
 8a4:	cb 01       	movw	r24, r22
 8a6:	6f e0       	ldi	r22, 0x0F	; 15
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
 8ae:	82 95       	swap	r24
 8b0:	80 7f       	andi	r24, 0xF0	; 240
 8b2:	88 bd       	out	0x28, r24	; 40
 8b4:	83 ec       	ldi	r24, 0xC3	; 195
 8b6:	99 e0       	ldi	r25, 0x09	; 9
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <ledLight+0x88>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <ledLight+0x8e>
 8be:	00 00       	nop
 8c0:	0c c0       	rjmp	.+24     	; 0x8da <ledLight+0xaa>
			_delay_ms(10);
		}
		else if(num>25){
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	48 ec       	ldi	r20, 0xC8	; 200
 8c8:	51 e4       	ldi	r21, 0x41	; 65
 8ca:	c7 01       	movw	r24, r14
 8cc:	b6 01       	movw	r22, r12
 8ce:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 8d2:	18 16       	cp	r1, r24
 8d4:	14 f4       	brge	.+4      	; 0x8da <ledLight+0xaa>
			OCR0B =0;
 8d6:	18 bc       	out	0x28, r1	; 40
			OCR0A =0;
 8d8:	17 bc       	out	0x27, r1	; 39
			
			
			
		}
}
 8da:	ff 90       	pop	r15
 8dc:	ef 90       	pop	r14
 8de:	df 90       	pop	r13
 8e0:	cf 90       	pop	r12
 8e2:	08 95       	ret

000008e4 <ledLightSecond>:
void ledLightSecond(float num){
 8e4:	cf 92       	push	r12
 8e6:	df 92       	push	r13
 8e8:	ef 92       	push	r14
 8ea:	ff 92       	push	r15
 8ec:	6b 01       	movw	r12, r22
 8ee:	7c 01       	movw	r14, r24
		TCCR1A |=(1<<WGM11)|(1<<COM1A1) |(1<COM1B1);
 8f0:	e0 e8       	ldi	r30, 0x80	; 128
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	83 68       	ori	r24, 0x83	; 131
 8f8:	80 83       	st	Z, r24
		TCCR1B |=(1<<WGM12)|(1<<CS11);
 8fa:	e1 e8       	ldi	r30, 0x81	; 129
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	80 81       	ld	r24, Z
 900:	8a 60       	ori	r24, 0x0A	; 10
 902:	80 83       	st	Z, r24
		
		DDRB |=(1<<LedWarmth) | (1<<LedHot);
 904:	84 b1       	in	r24, 0x04	; 4
 906:	86 60       	ori	r24, 0x06	; 6
 908:	84 b9       	out	0x04, r24	; 4
		ICR1=1023;
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	93 e0       	ldi	r25, 0x03	; 3
 90e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 912:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		
		
		if (num<25){
 916:	20 e0       	ldi	r18, 0x00	; 0
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	48 ec       	ldi	r20, 0xC8	; 200
 91c:	51 e4       	ldi	r21, 0x41	; 65
 91e:	c7 01       	movw	r24, r14
 920:	b6 01       	movw	r22, r12
 922:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 926:	88 23       	and	r24, r24
 928:	4c f4       	brge	.+18     	; 0x93c <__stack+0x3d>
			OCR1A =0;
 92a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 92e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			OCR1B =0;
 932:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 936:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 93a:	38 c0       	rjmp	.+112    	; 0x9ac <__stack+0xad>
		}
		
		else if(num>25)
 93c:	20 e0       	ldi	r18, 0x00	; 0
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	48 ec       	ldi	r20, 0xC8	; 200
 942:	51 e4       	ldi	r21, 0x41	; 65
 944:	c7 01       	movw	r24, r14
 946:	b6 01       	movw	r22, r12
 948:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 94c:	18 16       	cp	r1, r24
 94e:	74 f5       	brge	.+92     	; 0x9ac <__stack+0xad>
		{
			if (num>35)
 950:	20 e0       	ldi	r18, 0x00	; 0
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	4c e0       	ldi	r20, 0x0C	; 12
 956:	52 e4       	ldi	r21, 0x42	; 66
 958:	c7 01       	movw	r24, r14
 95a:	b6 01       	movw	r22, r12
 95c:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 960:	18 16       	cp	r1, r24
 962:	5c f4       	brge	.+22     	; 0x97a <__stack+0x7b>
			{
				OCR1A=0;
 964:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 968:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 96c:	83 ec       	ldi	r24, 0xC3	; 195
 96e:	99 e0       	ldi	r25, 0x09	; 9
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <__stack+0x71>
 974:	00 c0       	rjmp	.+0      	; 0x976 <__stack+0x77>
 976:	00 00       	nop
 978:	19 c0       	rjmp	.+50     	; 0x9ac <__stack+0xad>
				_delay_ms(10);
			}
			else
			{
			
			int temp = num;
 97a:	c7 01       	movw	r24, r14
 97c:	b6 01       	movw	r22, r12
 97e:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
			temp = temp%25;
 982:	cb 01       	movw	r24, r22
 984:	69 e1       	ldi	r22, 0x19	; 25
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
			temp =temp*16;
			
			OCR1A =temp;
 98c:	82 95       	swap	r24
 98e:	92 95       	swap	r25
 990:	90 7f       	andi	r25, 0xF0	; 240
 992:	98 27       	eor	r25, r24
 994:	80 7f       	andi	r24, 0xF0	; 240
 996:	98 27       	eor	r25, r24
 998:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 99c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 9a0:	83 ec       	ldi	r24, 0xC3	; 195
 9a2:	99 e0       	ldi	r25, 0x09	; 9
 9a4:	01 97       	sbiw	r24, 0x01	; 1
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <__stack+0xa5>
 9a8:	00 c0       	rjmp	.+0      	; 0x9aa <__stack+0xab>
 9aa:	00 00       	nop
			
			
		
		}
		
}
 9ac:	ff 90       	pop	r15
 9ae:	ef 90       	pop	r14
 9b0:	df 90       	pop	r13
 9b2:	cf 90       	pop	r12
 9b4:	08 95       	ret

000009b6 <ledLightThird>:
void ledLightThird(float count){
 9b6:	cf 92       	push	r12
 9b8:	df 92       	push	r13
 9ba:	ef 92       	push	r14
 9bc:	ff 92       	push	r15
 9be:	6b 01       	movw	r12, r22
 9c0:	7c 01       	movw	r14, r24
	TCCR1A |= (1<<WGM11) | (1<<COM1B1); // Use COM1B1 instead of COM1A1
 9c2:	e0 e8       	ldi	r30, 0x80	; 128
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	82 62       	ori	r24, 0x22	; 34
 9ca:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS11);
 9cc:	e1 e8       	ldi	r30, 0x81	; 129
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	80 81       	ld	r24, Z
 9d2:	8a 60       	ori	r24, 0x0A	; 10
 9d4:	80 83       	st	Z, r24
	DDRB |= (1<<LedHot); // Use PB2 instead of PB1
 9d6:	22 9a       	sbi	0x04, 2	; 4
	ICR1 = 1023;
 9d8:	8f ef       	ldi	r24, 0xFF	; 255
 9da:	93 e0       	ldi	r25, 0x03	; 3
 9dc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 9e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		if (count<=35)
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	4c e0       	ldi	r20, 0x0C	; 12
 9ea:	52 e4       	ldi	r21, 0x42	; 66
 9ec:	c7 01       	movw	r24, r14
 9ee:	b6 01       	movw	r22, r12
 9f0:	0e 94 10 06 	call	0xc20	; 0xc20 <__cmpsf2>
 9f4:	18 16       	cp	r1, r24
 9f6:	5c f0       	brlt	.+22     	; 0xa0e <ledLightThird+0x58>
		{
			OCR1B=0;
 9f8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 9fc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 a00:	83 ec       	ldi	r24, 0xC3	; 195
 a02:	99 e0       	ldi	r25, 0x09	; 9
 a04:	01 97       	sbiw	r24, 0x01	; 1
 a06:	f1 f7       	brne	.-4      	; 0xa04 <ledLightThird+0x4e>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <ledLightThird+0x54>
 a0a:	00 00       	nop
 a0c:	38 c0       	rjmp	.+112    	; 0xa7e <ledLightThird+0xc8>
			_delay_ms(10);
			
		}
		else if (count>35)
 a0e:	20 e0       	ldi	r18, 0x00	; 0
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	4c e0       	ldi	r20, 0x0C	; 12
 a14:	52 e4       	ldi	r21, 0x42	; 66
 a16:	c7 01       	movw	r24, r14
 a18:	b6 01       	movw	r22, r12
 a1a:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 a1e:	18 16       	cp	r1, r24
 a20:	74 f5       	brge	.+92     	; 0xa7e <ledLightThird+0xc8>
		{
			if (count>40)
 a22:	20 e0       	ldi	r18, 0x00	; 0
 a24:	30 e0       	ldi	r19, 0x00	; 0
 a26:	40 e2       	ldi	r20, 0x20	; 32
 a28:	52 e4       	ldi	r21, 0x42	; 66
 a2a:	c7 01       	movw	r24, r14
 a2c:	b6 01       	movw	r22, r12
 a2e:	0e 94 32 07 	call	0xe64	; 0xe64 <__gesf2>
 a32:	18 16       	cp	r1, r24
 a34:	5c f4       	brge	.+22     	; 0xa4c <ledLightThird+0x96>
			{
				OCR1B=0;
 a36:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 a3a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 a3e:	83 ec       	ldi	r24, 0xC3	; 195
 a40:	99 e0       	ldi	r25, 0x09	; 9
 a42:	01 97       	sbiw	r24, 0x01	; 1
 a44:	f1 f7       	brne	.-4      	; 0xa42 <ledLightThird+0x8c>
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <ledLightThird+0x92>
 a48:	00 00       	nop
 a4a:	19 c0       	rjmp	.+50     	; 0xa7e <ledLightThird+0xc8>
				_delay_ms(10);
			}
			else{
			int temp =count;
 a4c:	c7 01       	movw	r24, r14
 a4e:	b6 01       	movw	r22, r12
 a50:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fixsfsi>
			temp=temp%35;
 a54:	cb 01       	movw	r24, r22
 a56:	63 e2       	ldi	r22, 0x23	; 35
 a58:	70 e0       	ldi	r23, 0x00	; 0
 a5a:	0e 94 a4 07 	call	0xf48	; 0xf48 <__divmodhi4>
			temp=temp*100;
			
			OCR1B = temp; // Use OCR1B instead of OCR1A
 a5e:	44 e6       	ldi	r20, 0x64	; 100
 a60:	48 9f       	mul	r20, r24
 a62:	90 01       	movw	r18, r0
 a64:	49 9f       	mul	r20, r25
 a66:	30 0d       	add	r19, r0
 a68:	11 24       	eor	r1, r1
 a6a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 a6e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 a72:	83 ec       	ldi	r24, 0xC3	; 195
 a74:	99 e0       	ldi	r25, 0x09	; 9
 a76:	01 97       	sbiw	r24, 0x01	; 1
 a78:	f1 f7       	brne	.-4      	; 0xa76 <ledLightThird+0xc0>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <ledLightThird+0xc6>
 a7c:	00 00       	nop
	
	

	

}
 a7e:	ff 90       	pop	r15
 a80:	ef 90       	pop	r14
 a82:	df 90       	pop	r13
 a84:	cf 90       	pop	r12
 a86:	08 95       	ret

00000a88 <run>:
		}
	}
}


void run(){
 a88:	cf 92       	push	r12
 a8a:	df 92       	push	r13
 a8c:	ef 92       	push	r14
 a8e:	ff 92       	push	r15
	

	b = count * 9.0 / 5.0 + 32.0;
 a90:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <count>
 a94:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <count+0x1>
 a98:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <count+0x2>
 a9c:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <count+0x3>
 aa0:	20 e0       	ldi	r18, 0x00	; 0
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	40 e1       	ldi	r20, 0x10	; 16
 aa6:	51 e4       	ldi	r21, 0x41	; 65
 aa8:	c7 01       	movw	r24, r14
 aaa:	b6 01       	movw	r22, r12
 aac:	0e 94 37 07 	call	0xe6e	; 0xe6e <__mulsf3>
 ab0:	20 e0       	ldi	r18, 0x00	; 0
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	40 ea       	ldi	r20, 0xA0	; 160
 ab6:	50 e4       	ldi	r21, 0x40	; 64
 ab8:	0e 94 15 06 	call	0xc2a	; 0xc2a <__divsf3>
 abc:	20 e0       	ldi	r18, 0x00	; 0
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	40 e0       	ldi	r20, 0x00	; 0
 ac2:	52 e4       	ldi	r21, 0x42	; 66
 ac4:	0e 94 a4 05 	call	0xb48	; 0xb48 <__addsf3>
 ac8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 acc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 ad0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 ad4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	
	
	displayCellsius(count);
 ad8:	c7 01       	movw	r24, r14
 ada:	b6 01       	movw	r22, r12
 adc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <displayCellsius>
	ledLight(count);
 ae0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <count>
 ae4:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <count+0x1>
 ae8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count+0x2>
 aec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x3>
 af0:	0e 94 18 04 	call	0x830	; 0x830 <ledLight>
	ledLightSecond(count);
 af4:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <count>
 af8:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <count+0x1>
 afc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count+0x2>
 b00:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x3>
 b04:	0e 94 72 04 	call	0x8e4	; 0x8e4 <ledLightSecond>
	ledLightThird(count);
 b08:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <count>
 b0c:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <count+0x1>
 b10:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count+0x2>
 b14:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x3>
 b18:	0e 94 db 04 	call	0x9b6	; 0x9b6 <ledLightThird>


	
	
	displayFaran(b);
 b1c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 b20:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 b24:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 b28:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 b2c:	0e 94 c4 02 	call	0x588	; 0x588 <displayFaran>
	
	
	
	
	
}
 b30:	ff 90       	pop	r15
 b32:	ef 90       	pop	r14
 b34:	df 90       	pop	r13
 b36:	cf 90       	pop	r12
 b38:	08 95       	ret

00000b3a <main>:



int main(void)
{
	setup();
 b3a:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	PORTD |=(1<<BUTTON_PIN3);
 b3e:	5c 9a       	sbi	0x0b, 4	; 11
	while(1){
		run();
 b40:	0e 94 44 05 	call	0xa88	; 0xa88 <run>
 b44:	fd cf       	rjmp	.-6      	; 0xb40 <main+0x6>

00000b46 <__subsf3>:
 b46:	50 58       	subi	r21, 0x80	; 128

00000b48 <__addsf3>:
 b48:	bb 27       	eor	r27, r27
 b4a:	aa 27       	eor	r26, r26
 b4c:	0e 94 bb 05 	call	0xb76	; 0xb76 <__addsf3x>
 b50:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__fp_round>
 b54:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_pscA>
 b58:	38 f0       	brcs	.+14     	; 0xb68 <__addsf3+0x20>
 b5a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscB>
 b5e:	20 f0       	brcs	.+8      	; 0xb68 <__addsf3+0x20>
 b60:	39 f4       	brne	.+14     	; 0xb70 <__addsf3+0x28>
 b62:	9f 3f       	cpi	r25, 0xFF	; 255
 b64:	19 f4       	brne	.+6      	; 0xb6c <__addsf3+0x24>
 b66:	26 f4       	brtc	.+8      	; 0xb70 <__addsf3+0x28>
 b68:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_nan>
 b6c:	0e f4       	brtc	.+2      	; 0xb70 <__addsf3+0x28>
 b6e:	e0 95       	com	r30
 b70:	e7 fb       	bst	r30, 7
 b72:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_inf>

00000b76 <__addsf3x>:
 b76:	e9 2f       	mov	r30, r25
 b78:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_split3>
 b7c:	58 f3       	brcs	.-42     	; 0xb54 <__addsf3+0xc>
 b7e:	ba 17       	cp	r27, r26
 b80:	62 07       	cpc	r22, r18
 b82:	73 07       	cpc	r23, r19
 b84:	84 07       	cpc	r24, r20
 b86:	95 07       	cpc	r25, r21
 b88:	20 f0       	brcs	.+8      	; 0xb92 <__addsf3x+0x1c>
 b8a:	79 f4       	brne	.+30     	; 0xbaa <__addsf3x+0x34>
 b8c:	a6 f5       	brtc	.+104    	; 0xbf6 <__addsf3x+0x80>
 b8e:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_zero>
 b92:	0e f4       	brtc	.+2      	; 0xb96 <__addsf3x+0x20>
 b94:	e0 95       	com	r30
 b96:	0b 2e       	mov	r0, r27
 b98:	ba 2f       	mov	r27, r26
 b9a:	a0 2d       	mov	r26, r0
 b9c:	0b 01       	movw	r0, r22
 b9e:	b9 01       	movw	r22, r18
 ba0:	90 01       	movw	r18, r0
 ba2:	0c 01       	movw	r0, r24
 ba4:	ca 01       	movw	r24, r20
 ba6:	a0 01       	movw	r20, r0
 ba8:	11 24       	eor	r1, r1
 baa:	ff 27       	eor	r31, r31
 bac:	59 1b       	sub	r21, r25
 bae:	99 f0       	breq	.+38     	; 0xbd6 <__addsf3x+0x60>
 bb0:	59 3f       	cpi	r21, 0xF9	; 249
 bb2:	50 f4       	brcc	.+20     	; 0xbc8 <__addsf3x+0x52>
 bb4:	50 3e       	cpi	r21, 0xE0	; 224
 bb6:	68 f1       	brcs	.+90     	; 0xc12 <__addsf3x+0x9c>
 bb8:	1a 16       	cp	r1, r26
 bba:	f0 40       	sbci	r31, 0x00	; 0
 bbc:	a2 2f       	mov	r26, r18
 bbe:	23 2f       	mov	r18, r19
 bc0:	34 2f       	mov	r19, r20
 bc2:	44 27       	eor	r20, r20
 bc4:	58 5f       	subi	r21, 0xF8	; 248
 bc6:	f3 cf       	rjmp	.-26     	; 0xbae <__addsf3x+0x38>
 bc8:	46 95       	lsr	r20
 bca:	37 95       	ror	r19
 bcc:	27 95       	ror	r18
 bce:	a7 95       	ror	r26
 bd0:	f0 40       	sbci	r31, 0x00	; 0
 bd2:	53 95       	inc	r21
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__addsf3x+0x52>
 bd6:	7e f4       	brtc	.+30     	; 0xbf6 <__addsf3x+0x80>
 bd8:	1f 16       	cp	r1, r31
 bda:	ba 0b       	sbc	r27, r26
 bdc:	62 0b       	sbc	r22, r18
 bde:	73 0b       	sbc	r23, r19
 be0:	84 0b       	sbc	r24, r20
 be2:	ba f0       	brmi	.+46     	; 0xc12 <__addsf3x+0x9c>
 be4:	91 50       	subi	r25, 0x01	; 1
 be6:	a1 f0       	breq	.+40     	; 0xc10 <__addsf3x+0x9a>
 be8:	ff 0f       	add	r31, r31
 bea:	bb 1f       	adc	r27, r27
 bec:	66 1f       	adc	r22, r22
 bee:	77 1f       	adc	r23, r23
 bf0:	88 1f       	adc	r24, r24
 bf2:	c2 f7       	brpl	.-16     	; 0xbe4 <__addsf3x+0x6e>
 bf4:	0e c0       	rjmp	.+28     	; 0xc12 <__addsf3x+0x9c>
 bf6:	ba 0f       	add	r27, r26
 bf8:	62 1f       	adc	r22, r18
 bfa:	73 1f       	adc	r23, r19
 bfc:	84 1f       	adc	r24, r20
 bfe:	48 f4       	brcc	.+18     	; 0xc12 <__addsf3x+0x9c>
 c00:	87 95       	ror	r24
 c02:	77 95       	ror	r23
 c04:	67 95       	ror	r22
 c06:	b7 95       	ror	r27
 c08:	f7 95       	ror	r31
 c0a:	9e 3f       	cpi	r25, 0xFE	; 254
 c0c:	08 f0       	brcs	.+2      	; 0xc10 <__addsf3x+0x9a>
 c0e:	b0 cf       	rjmp	.-160    	; 0xb70 <__addsf3+0x28>
 c10:	93 95       	inc	r25
 c12:	88 0f       	add	r24, r24
 c14:	08 f0       	brcs	.+2      	; 0xc18 <__addsf3x+0xa2>
 c16:	99 27       	eor	r25, r25
 c18:	ee 0f       	add	r30, r30
 c1a:	97 95       	ror	r25
 c1c:	87 95       	ror	r24
 c1e:	08 95       	ret

00000c20 <__cmpsf2>:
 c20:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__fp_cmp>
 c24:	08 f4       	brcc	.+2      	; 0xc28 <__cmpsf2+0x8>
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	08 95       	ret

00000c2a <__divsf3>:
 c2a:	0e 94 29 06 	call	0xc52	; 0xc52 <__divsf3x>
 c2e:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__fp_round>
 c32:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscB>
 c36:	58 f0       	brcs	.+22     	; 0xc4e <__divsf3+0x24>
 c38:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_pscA>
 c3c:	40 f0       	brcs	.+16     	; 0xc4e <__divsf3+0x24>
 c3e:	29 f4       	brne	.+10     	; 0xc4a <__divsf3+0x20>
 c40:	5f 3f       	cpi	r21, 0xFF	; 255
 c42:	29 f0       	breq	.+10     	; 0xc4e <__divsf3+0x24>
 c44:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_inf>
 c48:	51 11       	cpse	r21, r1
 c4a:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
 c4e:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_nan>

00000c52 <__divsf3x>:
 c52:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_split3>
 c56:	68 f3       	brcs	.-38     	; 0xc32 <__divsf3+0x8>

00000c58 <__divsf3_pse>:
 c58:	99 23       	and	r25, r25
 c5a:	b1 f3       	breq	.-20     	; 0xc48 <__divsf3+0x1e>
 c5c:	55 23       	and	r21, r21
 c5e:	91 f3       	breq	.-28     	; 0xc44 <__divsf3+0x1a>
 c60:	95 1b       	sub	r25, r21
 c62:	55 0b       	sbc	r21, r21
 c64:	bb 27       	eor	r27, r27
 c66:	aa 27       	eor	r26, r26
 c68:	62 17       	cp	r22, r18
 c6a:	73 07       	cpc	r23, r19
 c6c:	84 07       	cpc	r24, r20
 c6e:	38 f0       	brcs	.+14     	; 0xc7e <__divsf3_pse+0x26>
 c70:	9f 5f       	subi	r25, 0xFF	; 255
 c72:	5f 4f       	sbci	r21, 0xFF	; 255
 c74:	22 0f       	add	r18, r18
 c76:	33 1f       	adc	r19, r19
 c78:	44 1f       	adc	r20, r20
 c7a:	aa 1f       	adc	r26, r26
 c7c:	a9 f3       	breq	.-22     	; 0xc68 <__divsf3_pse+0x10>
 c7e:	35 d0       	rcall	.+106    	; 0xcea <__divsf3_pse+0x92>
 c80:	0e 2e       	mov	r0, r30
 c82:	3a f0       	brmi	.+14     	; 0xc92 <__divsf3_pse+0x3a>
 c84:	e0 e8       	ldi	r30, 0x80	; 128
 c86:	32 d0       	rcall	.+100    	; 0xcec <__divsf3_pse+0x94>
 c88:	91 50       	subi	r25, 0x01	; 1
 c8a:	50 40       	sbci	r21, 0x00	; 0
 c8c:	e6 95       	lsr	r30
 c8e:	00 1c       	adc	r0, r0
 c90:	ca f7       	brpl	.-14     	; 0xc84 <__divsf3_pse+0x2c>
 c92:	2b d0       	rcall	.+86     	; 0xcea <__divsf3_pse+0x92>
 c94:	fe 2f       	mov	r31, r30
 c96:	29 d0       	rcall	.+82     	; 0xcea <__divsf3_pse+0x92>
 c98:	66 0f       	add	r22, r22
 c9a:	77 1f       	adc	r23, r23
 c9c:	88 1f       	adc	r24, r24
 c9e:	bb 1f       	adc	r27, r27
 ca0:	26 17       	cp	r18, r22
 ca2:	37 07       	cpc	r19, r23
 ca4:	48 07       	cpc	r20, r24
 ca6:	ab 07       	cpc	r26, r27
 ca8:	b0 e8       	ldi	r27, 0x80	; 128
 caa:	09 f0       	breq	.+2      	; 0xcae <__divsf3_pse+0x56>
 cac:	bb 0b       	sbc	r27, r27
 cae:	80 2d       	mov	r24, r0
 cb0:	bf 01       	movw	r22, r30
 cb2:	ff 27       	eor	r31, r31
 cb4:	93 58       	subi	r25, 0x83	; 131
 cb6:	5f 4f       	sbci	r21, 0xFF	; 255
 cb8:	3a f0       	brmi	.+14     	; 0xcc8 <__divsf3_pse+0x70>
 cba:	9e 3f       	cpi	r25, 0xFE	; 254
 cbc:	51 05       	cpc	r21, r1
 cbe:	78 f0       	brcs	.+30     	; 0xcde <__divsf3_pse+0x86>
 cc0:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_inf>
 cc4:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
 cc8:	5f 3f       	cpi	r21, 0xFF	; 255
 cca:	e4 f3       	brlt	.-8      	; 0xcc4 <__divsf3_pse+0x6c>
 ccc:	98 3e       	cpi	r25, 0xE8	; 232
 cce:	d4 f3       	brlt	.-12     	; 0xcc4 <__divsf3_pse+0x6c>
 cd0:	86 95       	lsr	r24
 cd2:	77 95       	ror	r23
 cd4:	67 95       	ror	r22
 cd6:	b7 95       	ror	r27
 cd8:	f7 95       	ror	r31
 cda:	9f 5f       	subi	r25, 0xFF	; 255
 cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__divsf3_pse+0x78>
 cde:	88 0f       	add	r24, r24
 ce0:	91 1d       	adc	r25, r1
 ce2:	96 95       	lsr	r25
 ce4:	87 95       	ror	r24
 ce6:	97 f9       	bld	r25, 7
 ce8:	08 95       	ret
 cea:	e1 e0       	ldi	r30, 0x01	; 1
 cec:	66 0f       	add	r22, r22
 cee:	77 1f       	adc	r23, r23
 cf0:	88 1f       	adc	r24, r24
 cf2:	bb 1f       	adc	r27, r27
 cf4:	62 17       	cp	r22, r18
 cf6:	73 07       	cpc	r23, r19
 cf8:	84 07       	cpc	r24, r20
 cfa:	ba 07       	cpc	r27, r26
 cfc:	20 f0       	brcs	.+8      	; 0xd06 <__divsf3_pse+0xae>
 cfe:	62 1b       	sub	r22, r18
 d00:	73 0b       	sbc	r23, r19
 d02:	84 0b       	sbc	r24, r20
 d04:	ba 0b       	sbc	r27, r26
 d06:	ee 1f       	adc	r30, r30
 d08:	88 f7       	brcc	.-30     	; 0xcec <__divsf3_pse+0x94>
 d0a:	e0 95       	com	r30
 d0c:	08 95       	ret

00000d0e <__fixsfsi>:
 d0e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fixunssfsi>
 d12:	68 94       	set
 d14:	b1 11       	cpse	r27, r1
 d16:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
 d1a:	08 95       	ret

00000d1c <__fixunssfsi>:
 d1c:	0e 94 11 07 	call	0xe22	; 0xe22 <__fp_splitA>
 d20:	88 f0       	brcs	.+34     	; 0xd44 <__fixunssfsi+0x28>
 d22:	9f 57       	subi	r25, 0x7F	; 127
 d24:	98 f0       	brcs	.+38     	; 0xd4c <__fixunssfsi+0x30>
 d26:	b9 2f       	mov	r27, r25
 d28:	99 27       	eor	r25, r25
 d2a:	b7 51       	subi	r27, 0x17	; 23
 d2c:	b0 f0       	brcs	.+44     	; 0xd5a <__fixunssfsi+0x3e>
 d2e:	e1 f0       	breq	.+56     	; 0xd68 <__fixunssfsi+0x4c>
 d30:	66 0f       	add	r22, r22
 d32:	77 1f       	adc	r23, r23
 d34:	88 1f       	adc	r24, r24
 d36:	99 1f       	adc	r25, r25
 d38:	1a f0       	brmi	.+6      	; 0xd40 <__fixunssfsi+0x24>
 d3a:	ba 95       	dec	r27
 d3c:	c9 f7       	brne	.-14     	; 0xd30 <__fixunssfsi+0x14>
 d3e:	14 c0       	rjmp	.+40     	; 0xd68 <__fixunssfsi+0x4c>
 d40:	b1 30       	cpi	r27, 0x01	; 1
 d42:	91 f0       	breq	.+36     	; 0xd68 <__fixunssfsi+0x4c>
 d44:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_zero>
 d48:	b1 e0       	ldi	r27, 0x01	; 1
 d4a:	08 95       	ret
 d4c:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_zero>
 d50:	67 2f       	mov	r22, r23
 d52:	78 2f       	mov	r23, r24
 d54:	88 27       	eor	r24, r24
 d56:	b8 5f       	subi	r27, 0xF8	; 248
 d58:	39 f0       	breq	.+14     	; 0xd68 <__fixunssfsi+0x4c>
 d5a:	b9 3f       	cpi	r27, 0xF9	; 249
 d5c:	cc f3       	brlt	.-14     	; 0xd50 <__fixunssfsi+0x34>
 d5e:	86 95       	lsr	r24
 d60:	77 95       	ror	r23
 d62:	67 95       	ror	r22
 d64:	b3 95       	inc	r27
 d66:	d9 f7       	brne	.-10     	; 0xd5e <__fixunssfsi+0x42>
 d68:	3e f4       	brtc	.+14     	; 0xd78 <__fixunssfsi+0x5c>
 d6a:	90 95       	com	r25
 d6c:	80 95       	com	r24
 d6e:	70 95       	com	r23
 d70:	61 95       	neg	r22
 d72:	7f 4f       	sbci	r23, 0xFF	; 255
 d74:	8f 4f       	sbci	r24, 0xFF	; 255
 d76:	9f 4f       	sbci	r25, 0xFF	; 255
 d78:	08 95       	ret

00000d7a <__fp_cmp>:
 d7a:	99 0f       	add	r25, r25
 d7c:	00 08       	sbc	r0, r0
 d7e:	55 0f       	add	r21, r21
 d80:	aa 0b       	sbc	r26, r26
 d82:	e0 e8       	ldi	r30, 0x80	; 128
 d84:	fe ef       	ldi	r31, 0xFE	; 254
 d86:	16 16       	cp	r1, r22
 d88:	17 06       	cpc	r1, r23
 d8a:	e8 07       	cpc	r30, r24
 d8c:	f9 07       	cpc	r31, r25
 d8e:	c0 f0       	brcs	.+48     	; 0xdc0 <__fp_cmp+0x46>
 d90:	12 16       	cp	r1, r18
 d92:	13 06       	cpc	r1, r19
 d94:	e4 07       	cpc	r30, r20
 d96:	f5 07       	cpc	r31, r21
 d98:	98 f0       	brcs	.+38     	; 0xdc0 <__fp_cmp+0x46>
 d9a:	62 1b       	sub	r22, r18
 d9c:	73 0b       	sbc	r23, r19
 d9e:	84 0b       	sbc	r24, r20
 da0:	95 0b       	sbc	r25, r21
 da2:	39 f4       	brne	.+14     	; 0xdb2 <__fp_cmp+0x38>
 da4:	0a 26       	eor	r0, r26
 da6:	61 f0       	breq	.+24     	; 0xdc0 <__fp_cmp+0x46>
 da8:	23 2b       	or	r18, r19
 daa:	24 2b       	or	r18, r20
 dac:	25 2b       	or	r18, r21
 dae:	21 f4       	brne	.+8      	; 0xdb8 <__fp_cmp+0x3e>
 db0:	08 95       	ret
 db2:	0a 26       	eor	r0, r26
 db4:	09 f4       	brne	.+2      	; 0xdb8 <__fp_cmp+0x3e>
 db6:	a1 40       	sbci	r26, 0x01	; 1
 db8:	a6 95       	lsr	r26
 dba:	8f ef       	ldi	r24, 0xFF	; 255
 dbc:	81 1d       	adc	r24, r1
 dbe:	81 1d       	adc	r24, r1
 dc0:	08 95       	ret

00000dc2 <__fp_inf>:
 dc2:	97 f9       	bld	r25, 7
 dc4:	9f 67       	ori	r25, 0x7F	; 127
 dc6:	80 e8       	ldi	r24, 0x80	; 128
 dc8:	70 e0       	ldi	r23, 0x00	; 0
 dca:	60 e0       	ldi	r22, 0x00	; 0
 dcc:	08 95       	ret

00000dce <__fp_nan>:
 dce:	9f ef       	ldi	r25, 0xFF	; 255
 dd0:	80 ec       	ldi	r24, 0xC0	; 192
 dd2:	08 95       	ret

00000dd4 <__fp_pscA>:
 dd4:	00 24       	eor	r0, r0
 dd6:	0a 94       	dec	r0
 dd8:	16 16       	cp	r1, r22
 dda:	17 06       	cpc	r1, r23
 ddc:	18 06       	cpc	r1, r24
 dde:	09 06       	cpc	r0, r25
 de0:	08 95       	ret

00000de2 <__fp_pscB>:
 de2:	00 24       	eor	r0, r0
 de4:	0a 94       	dec	r0
 de6:	12 16       	cp	r1, r18
 de8:	13 06       	cpc	r1, r19
 dea:	14 06       	cpc	r1, r20
 dec:	05 06       	cpc	r0, r21
 dee:	08 95       	ret

00000df0 <__fp_round>:
 df0:	09 2e       	mov	r0, r25
 df2:	03 94       	inc	r0
 df4:	00 0c       	add	r0, r0
 df6:	11 f4       	brne	.+4      	; 0xdfc <__fp_round+0xc>
 df8:	88 23       	and	r24, r24
 dfa:	52 f0       	brmi	.+20     	; 0xe10 <__fp_round+0x20>
 dfc:	bb 0f       	add	r27, r27
 dfe:	40 f4       	brcc	.+16     	; 0xe10 <__fp_round+0x20>
 e00:	bf 2b       	or	r27, r31
 e02:	11 f4       	brne	.+4      	; 0xe08 <__fp_round+0x18>
 e04:	60 ff       	sbrs	r22, 0
 e06:	04 c0       	rjmp	.+8      	; 0xe10 <__fp_round+0x20>
 e08:	6f 5f       	subi	r22, 0xFF	; 255
 e0a:	7f 4f       	sbci	r23, 0xFF	; 255
 e0c:	8f 4f       	sbci	r24, 0xFF	; 255
 e0e:	9f 4f       	sbci	r25, 0xFF	; 255
 e10:	08 95       	ret

00000e12 <__fp_split3>:
 e12:	57 fd       	sbrc	r21, 7
 e14:	90 58       	subi	r25, 0x80	; 128
 e16:	44 0f       	add	r20, r20
 e18:	55 1f       	adc	r21, r21
 e1a:	59 f0       	breq	.+22     	; 0xe32 <__fp_splitA+0x10>
 e1c:	5f 3f       	cpi	r21, 0xFF	; 255
 e1e:	71 f0       	breq	.+28     	; 0xe3c <__fp_splitA+0x1a>
 e20:	47 95       	ror	r20

00000e22 <__fp_splitA>:
 e22:	88 0f       	add	r24, r24
 e24:	97 fb       	bst	r25, 7
 e26:	99 1f       	adc	r25, r25
 e28:	61 f0       	breq	.+24     	; 0xe42 <__fp_splitA+0x20>
 e2a:	9f 3f       	cpi	r25, 0xFF	; 255
 e2c:	79 f0       	breq	.+30     	; 0xe4c <__fp_splitA+0x2a>
 e2e:	87 95       	ror	r24
 e30:	08 95       	ret
 e32:	12 16       	cp	r1, r18
 e34:	13 06       	cpc	r1, r19
 e36:	14 06       	cpc	r1, r20
 e38:	55 1f       	adc	r21, r21
 e3a:	f2 cf       	rjmp	.-28     	; 0xe20 <__fp_split3+0xe>
 e3c:	46 95       	lsr	r20
 e3e:	f1 df       	rcall	.-30     	; 0xe22 <__fp_splitA>
 e40:	08 c0       	rjmp	.+16     	; 0xe52 <__fp_splitA+0x30>
 e42:	16 16       	cp	r1, r22
 e44:	17 06       	cpc	r1, r23
 e46:	18 06       	cpc	r1, r24
 e48:	99 1f       	adc	r25, r25
 e4a:	f1 cf       	rjmp	.-30     	; 0xe2e <__fp_splitA+0xc>
 e4c:	86 95       	lsr	r24
 e4e:	71 05       	cpc	r23, r1
 e50:	61 05       	cpc	r22, r1
 e52:	08 94       	sec
 e54:	08 95       	ret

00000e56 <__fp_zero>:
 e56:	e8 94       	clt

00000e58 <__fp_szero>:
 e58:	bb 27       	eor	r27, r27
 e5a:	66 27       	eor	r22, r22
 e5c:	77 27       	eor	r23, r23
 e5e:	cb 01       	movw	r24, r22
 e60:	97 f9       	bld	r25, 7
 e62:	08 95       	ret

00000e64 <__gesf2>:
 e64:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__fp_cmp>
 e68:	08 f4       	brcc	.+2      	; 0xe6c <__gesf2+0x8>
 e6a:	8f ef       	ldi	r24, 0xFF	; 255
 e6c:	08 95       	ret

00000e6e <__mulsf3>:
 e6e:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3x>
 e72:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__fp_round>
 e76:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__fp_pscA>
 e7a:	38 f0       	brcs	.+14     	; 0xe8a <__mulsf3+0x1c>
 e7c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscB>
 e80:	20 f0       	brcs	.+8      	; 0xe8a <__mulsf3+0x1c>
 e82:	95 23       	and	r25, r21
 e84:	11 f0       	breq	.+4      	; 0xe8a <__mulsf3+0x1c>
 e86:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_inf>
 e8a:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__fp_nan>
 e8e:	11 24       	eor	r1, r1
 e90:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>

00000e94 <__mulsf3x>:
 e94:	0e 94 09 07 	call	0xe12	; 0xe12 <__fp_split3>
 e98:	70 f3       	brcs	.-36     	; 0xe76 <__mulsf3+0x8>

00000e9a <__mulsf3_pse>:
 e9a:	95 9f       	mul	r25, r21
 e9c:	c1 f3       	breq	.-16     	; 0xe8e <__mulsf3+0x20>
 e9e:	95 0f       	add	r25, r21
 ea0:	50 e0       	ldi	r21, 0x00	; 0
 ea2:	55 1f       	adc	r21, r21
 ea4:	62 9f       	mul	r22, r18
 ea6:	f0 01       	movw	r30, r0
 ea8:	72 9f       	mul	r23, r18
 eaa:	bb 27       	eor	r27, r27
 eac:	f0 0d       	add	r31, r0
 eae:	b1 1d       	adc	r27, r1
 eb0:	63 9f       	mul	r22, r19
 eb2:	aa 27       	eor	r26, r26
 eb4:	f0 0d       	add	r31, r0
 eb6:	b1 1d       	adc	r27, r1
 eb8:	aa 1f       	adc	r26, r26
 eba:	64 9f       	mul	r22, r20
 ebc:	66 27       	eor	r22, r22
 ebe:	b0 0d       	add	r27, r0
 ec0:	a1 1d       	adc	r26, r1
 ec2:	66 1f       	adc	r22, r22
 ec4:	82 9f       	mul	r24, r18
 ec6:	22 27       	eor	r18, r18
 ec8:	b0 0d       	add	r27, r0
 eca:	a1 1d       	adc	r26, r1
 ecc:	62 1f       	adc	r22, r18
 ece:	73 9f       	mul	r23, r19
 ed0:	b0 0d       	add	r27, r0
 ed2:	a1 1d       	adc	r26, r1
 ed4:	62 1f       	adc	r22, r18
 ed6:	83 9f       	mul	r24, r19
 ed8:	a0 0d       	add	r26, r0
 eda:	61 1d       	adc	r22, r1
 edc:	22 1f       	adc	r18, r18
 ede:	74 9f       	mul	r23, r20
 ee0:	33 27       	eor	r19, r19
 ee2:	a0 0d       	add	r26, r0
 ee4:	61 1d       	adc	r22, r1
 ee6:	23 1f       	adc	r18, r19
 ee8:	84 9f       	mul	r24, r20
 eea:	60 0d       	add	r22, r0
 eec:	21 1d       	adc	r18, r1
 eee:	82 2f       	mov	r24, r18
 ef0:	76 2f       	mov	r23, r22
 ef2:	6a 2f       	mov	r22, r26
 ef4:	11 24       	eor	r1, r1
 ef6:	9f 57       	subi	r25, 0x7F	; 127
 ef8:	50 40       	sbci	r21, 0x00	; 0
 efa:	9a f0       	brmi	.+38     	; 0xf22 <__mulsf3_pse+0x88>
 efc:	f1 f0       	breq	.+60     	; 0xf3a <__mulsf3_pse+0xa0>
 efe:	88 23       	and	r24, r24
 f00:	4a f0       	brmi	.+18     	; 0xf14 <__mulsf3_pse+0x7a>
 f02:	ee 0f       	add	r30, r30
 f04:	ff 1f       	adc	r31, r31
 f06:	bb 1f       	adc	r27, r27
 f08:	66 1f       	adc	r22, r22
 f0a:	77 1f       	adc	r23, r23
 f0c:	88 1f       	adc	r24, r24
 f0e:	91 50       	subi	r25, 0x01	; 1
 f10:	50 40       	sbci	r21, 0x00	; 0
 f12:	a9 f7       	brne	.-22     	; 0xefe <__mulsf3_pse+0x64>
 f14:	9e 3f       	cpi	r25, 0xFE	; 254
 f16:	51 05       	cpc	r21, r1
 f18:	80 f0       	brcs	.+32     	; 0xf3a <__mulsf3_pse+0xa0>
 f1a:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__fp_inf>
 f1e:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_szero>
 f22:	5f 3f       	cpi	r21, 0xFF	; 255
 f24:	e4 f3       	brlt	.-8      	; 0xf1e <__mulsf3_pse+0x84>
 f26:	98 3e       	cpi	r25, 0xE8	; 232
 f28:	d4 f3       	brlt	.-12     	; 0xf1e <__mulsf3_pse+0x84>
 f2a:	86 95       	lsr	r24
 f2c:	77 95       	ror	r23
 f2e:	67 95       	ror	r22
 f30:	b7 95       	ror	r27
 f32:	f7 95       	ror	r31
 f34:	e7 95       	ror	r30
 f36:	9f 5f       	subi	r25, 0xFF	; 255
 f38:	c1 f7       	brne	.-16     	; 0xf2a <__mulsf3_pse+0x90>
 f3a:	fe 2b       	or	r31, r30
 f3c:	88 0f       	add	r24, r24
 f3e:	91 1d       	adc	r25, r1
 f40:	96 95       	lsr	r25
 f42:	87 95       	ror	r24
 f44:	97 f9       	bld	r25, 7
 f46:	08 95       	ret

00000f48 <__divmodhi4>:
 f48:	97 fb       	bst	r25, 7
 f4a:	07 2e       	mov	r0, r23
 f4c:	16 f4       	brtc	.+4      	; 0xf52 <__divmodhi4+0xa>
 f4e:	00 94       	com	r0
 f50:	07 d0       	rcall	.+14     	; 0xf60 <__divmodhi4_neg1>
 f52:	77 fd       	sbrc	r23, 7
 f54:	09 d0       	rcall	.+18     	; 0xf68 <__divmodhi4_neg2>
 f56:	0e 94 b8 07 	call	0xf70	; 0xf70 <__udivmodhi4>
 f5a:	07 fc       	sbrc	r0, 7
 f5c:	05 d0       	rcall	.+10     	; 0xf68 <__divmodhi4_neg2>
 f5e:	3e f4       	brtc	.+14     	; 0xf6e <__divmodhi4_exit>

00000f60 <__divmodhi4_neg1>:
 f60:	90 95       	com	r25
 f62:	81 95       	neg	r24
 f64:	9f 4f       	sbci	r25, 0xFF	; 255
 f66:	08 95       	ret

00000f68 <__divmodhi4_neg2>:
 f68:	70 95       	com	r23
 f6a:	61 95       	neg	r22
 f6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000f6e <__divmodhi4_exit>:
 f6e:	08 95       	ret

00000f70 <__udivmodhi4>:
 f70:	aa 1b       	sub	r26, r26
 f72:	bb 1b       	sub	r27, r27
 f74:	51 e1       	ldi	r21, 0x11	; 17
 f76:	07 c0       	rjmp	.+14     	; 0xf86 <__udivmodhi4_ep>

00000f78 <__udivmodhi4_loop>:
 f78:	aa 1f       	adc	r26, r26
 f7a:	bb 1f       	adc	r27, r27
 f7c:	a6 17       	cp	r26, r22
 f7e:	b7 07       	cpc	r27, r23
 f80:	10 f0       	brcs	.+4      	; 0xf86 <__udivmodhi4_ep>
 f82:	a6 1b       	sub	r26, r22
 f84:	b7 0b       	sbc	r27, r23

00000f86 <__udivmodhi4_ep>:
 f86:	88 1f       	adc	r24, r24
 f88:	99 1f       	adc	r25, r25
 f8a:	5a 95       	dec	r21
 f8c:	a9 f7       	brne	.-22     	; 0xf78 <__udivmodhi4_loop>
 f8e:	80 95       	com	r24
 f90:	90 95       	com	r25
 f92:	bc 01       	movw	r22, r24
 f94:	cd 01       	movw	r24, r26
 f96:	08 95       	ret

00000f98 <_exit>:
 f98:	f8 94       	cli

00000f9a <__stop_program>:
 f9a:	ff cf       	rjmp	.-2      	; 0xf9a <__stop_program>
